// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© ljmaslin

//@version=5
strategy("Mas7er-DR-Stats-all-base", currency=currency.NONE, max_lines_count = 500, max_boxes_count = 500, initial_capital=100000)

import ljmaslin/NewsAndHols/2 as NewsAndHols

// Targets
var EXTmonB1LONG = array.new<float>()
var EXTmonB1SHORT = array.new<float>()
var EXTmonB2LONG = array.new<float>()
var EXTmonB2SHORT = array.new<float>()
var EXTtuesB1LONG = array.new<float>()
var EXTtuesB1SHORT = array.new<float>()
var EXTtuesB2LONG = array.new<float>()
var EXTtuesB2SHORT = array.new<float>()
var EXTwedsB1LONG = array.new<float>()
var EXTwedsB1SHORT = array.new<float>()
var EXTwedsB2LONG = array.new<float>()
var EXTwedsB2SHORT = array.new<float>()
var EXTthursB1LONG = array.new<float>()
var EXTthursB1SHORT = array.new<float>()
var EXTthursB2LONG = array.new<float>()
var EXTthursB2SHORT = array.new<float>()
var EXTfriB1LONG = array.new<float>()
var EXTfriB1SHORT = array.new<float>()
var EXTfriB2LONG = array.new<float>()
var EXTfriB2SHORT = array.new<float>()
var TMEmonB1LONG = array.new<int>()
var TMEmonB1SHORT = array.new<int>()
var TMEmonB2LONG = array.new<int>()
var TMEmonB2SHORT = array.new<int>()
var TMEtuesB1LONG = array.new<int>()
var TMEtuesB1SHORT = array.new<int>()
var TMEtuesB2LONG = array.new<int>()
var TMEtuesB2SHORT = array.new<int>()
var TMEwedsB1LONG = array.new<int>()
var TMEwedsB1SHORT = array.new<int>()
var TMEwedsB2LONG = array.new<int>()
var TMEwedsB2SHORT = array.new<int>()
var TMEthursB1LONG = array.new<int>()
var TMEthursB1SHORT = array.new<int>()
var TMEthursB2LONG = array.new<int>()
var TMEthursB2SHORT = array.new<int>()
var TMEfriB1LONG = array.new<int>()
var TMEfriB1SHORT = array.new<int>()
var TMEfriB2LONG = array.new<int>()
var TMEfriB2SHORT = array.new<int>()

var statsFormat="MedMode"

// Target Values
var ES_ODR_EXTmonB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTmonB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTmonB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTmonB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTtuesB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTtuesB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTtuesB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTtuesB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTwedsB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTwedsB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTwedsB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTwedsB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTthursB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTthursB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTthursB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTthursB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTfriB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTfriB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTfriB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_EXTfriB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEmonB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEmonB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEmonB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEmonB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEtuesB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEtuesB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEtuesB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEtuesB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEwedsB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEwedsB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEwedsB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEwedsB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEthursB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEthursB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEthursB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEthursB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEfriB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEfriB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEfriB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var ES_ODR_TMEfriB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)

var ES_RDR_EXTmonB1LONG = array.from(0.7,0.8,0.5,0.6,0,0.1,0.2,-0.4,na,na)
var ES_RDR_EXTmonB1SHORT = array.from(1.2,1.3,1.1,1.2,0,0.1,0.1,-0.5,na,na)
var ES_RDR_EXTmonB2LONG = array.from(0.7,0.8,0.7,0.8,0,0.1,0.3,-0.4,na,na)
var ES_RDR_EXTmonB2SHORT = array.from(0.8,0.9,0.6,0.7,0,0.1,0.3,-0.5,na,na)
var ES_RDR_EXTtuesB1LONG = array.from(1,1.2,0.6,0.7,0,0.1,0.4,-0.5,na,na)
var ES_RDR_EXTtuesB1SHORT = array.from(1.2,1.3,0.5,0.6,0,0.1,0.1,-0.2,na,na)
var ES_RDR_EXTtuesB2LONG = array.from(0.8,0.9,0.6,0.7,0,-0.1,0.4,-0.2,na,na)
var ES_RDR_EXTtuesB2SHORT = array.from(1,1.1,0.6,0.7,0,0.1,0.2,0,-0.2,-0.5)
var ES_RDR_EXTwedsB1LONG = array.from(1.2,1.3,1.3,1.4,0,0.1,0.1,-0.2,-0.4,-0.5)
var ES_RDR_EXTwedsB1SHORT = array.from(1.4,1.5,0.6,0.7,0,0.1,0.2,-0.2,na,na)
var ES_RDR_EXTwedsB2LONG = array.from(1.3,1.4,0.7,0.8,0,0.1,0.1,-0.2,na,na)
var ES_RDR_EXTwedsB2SHORT = array.from(1.3,1.4,0.9,1,0,0.1,0.2,-0.2,na,na)
var ES_RDR_EXTthursB1LONG = array.from(1.1,1.2,na,na,na,na,na,na,na,na)
var ES_RDR_EXTthursB1SHORT = array.from(1.1,1.2,na,na,na,na,na,na,na,na)
var ES_RDR_EXTthursB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_RDR_EXTthursB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_RDR_EXTfriB1LONG = array.from(1.2,1.3,na,na,na,na,na,na,na,na)
var ES_RDR_EXTfriB1SHORT = array.from(1.3,1.4,na,na,na,na,na,na,na,na)
var ES_RDR_EXTfriB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_RDR_EXTfriB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var ES_RDR_TMEmonB1LONG = array.from(48600000,56700000,57300000,56700000,57300000,43200000,38700000,39300000,na,na,50100000,na)
var ES_RDR_TMEmonB1SHORT = array.from(47700000,56700000,57300000,56700000,57300000,45000000,38700000,39300000,na,na,53700000,na)
var ES_RDR_TMEmonB2LONG = array.from(49500000,56700000,57300000,40500000,42000000,45000000,40500000,41100000,na,na,47400000,na)
var ES_RDR_TMEmonB2SHORT = array.from(45900000,56700000,57300000,40500000,42000000,49800000,56700000,57300000,na,na,54600000,na)
var ES_RDR_TMEtuesB1LONG = array.from(52800000,56700000,57300000,56700000,57300000,42300000,39600000,40200000,na,na,48300000,na)
var ES_RDR_TMEtuesB1SHORT = array.from(48000000,56700000,57300000,56700000,57300000,44100000,38700000,39300000,na,na,51000000,na)
var ES_RDR_TMEtuesB2LONG = array.from(53400000,56700000,57300000,56700000,57300000,46800000,56700000,57300000,na,na,52800000,na)
var ES_RDR_TMEtuesB2SHORT = array.from(48000000,40500000,41100000,53100000,53700000,51900000,41400000,42000000,na,na,54000000,54600000)
var ES_RDR_TMEwedsB1LONG = array.from(53700000,56700000,57300000,56700000,57300000,42000000,37800000,38400000,39600000,40200000,47400000,na)
var ES_RDR_TMEwedsB1SHORT = array.from(51300000,56700000,57300000,56700000,57300000,44100000,37800000,38400000,40500000,41100000,50100000,na)
var ES_RDR_TMEwedsB2LONG = array.from(53700000,56700000,57300000,56700000,57300000,42000000,37800000,38400000,39600000,40200000,47400000,na)
var ES_RDR_TMEwedsB2SHORT = array.from(51300000,56700000,57300000,56700000,57300000,44100000,37800000,38400000,41400000,42000000,50100000,na)
var ES_RDR_TMEthursB1LONG = array.from(na,56700000,57300000,56700000,57300000,42000000,38700000,39300000,39600000,40200000,na,na)
var ES_RDR_TMEthursB1SHORT = array.from(na,56700000,57300000,56700000,57300000,44700000,39600000,40200000,38700000,39300000,na,na)
var ES_RDR_TMEthursB2LONG = array.from(na,56700000,57300000,56700000,57300000,43500000,41400000,42000000,na,na,na,na)
var ES_RDR_TMEthursB2SHORT = array.from(na,56700000,57300000,56700000,57300000,44700000,39600000,40200000,na,na,na,na)
var ES_RDR_TMEfriB1LONG = array.from(na,56700000,57300000,56700000,57300000,42000000,39600000,40200000,38700000,39300000,na,na)
var ES_RDR_TMEfriB1SHORT = array.from(na,56700000,57300000,56700000,57300000,44400000,39600000,40200000,na,na,na,na)
var ES_RDR_TMEfriB2LONG = array.from(na,56700000,57300000,56700000,57300000,46800000,42300000,42900000,na,na,na,na)
var ES_RDR_TMEfriB2SHORT = array.from(na,56700000,57300000,56700000,57300000,na,na,na,na,na,na,na)

var CL_ODR_EXTmonB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTmonB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTmonB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTmonB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTtuesB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTtuesB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTtuesB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTtuesB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTwedsB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTwedsB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTwedsB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTwedsB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTthursB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTthursB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTthursB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTthursB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTfriB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTfriB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTfriB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_EXTfriB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEmonB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEmonB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEmonB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEmonB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEtuesB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEtuesB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEtuesB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEtuesB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEwedsB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEwedsB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEwedsB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEwedsB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEthursB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEthursB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEthursB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEthursB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEfriB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEfriB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEfriB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_ODR_TMEfriB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)


var CL_RDR_EXTmonB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTmonB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTmonB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTmonB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTtuesB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTtuesB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTtuesB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTtuesB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTwedsB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTwedsB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTwedsB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTwedsB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTthursB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTthursB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTthursB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTthursB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTfriB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTfriB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTfriB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_EXTfriB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEmonB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEmonB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEmonB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEmonB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEtuesB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEtuesB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEtuesB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEtuesB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEwedsB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEwedsB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEwedsB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEwedsB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEthursB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEthursB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEthursB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEthursB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEfriB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEfriB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEfriB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var CL_RDR_TMEfriB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)


var DAX_ODR_EXTmonB1LONG = array.from(0.8,0.9,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTmonB1SHORT = array.from(0.9,1,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTmonB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTmonB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTtuesB1LONG = array.from(0.9,1,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTtuesB1SHORT = array.from(1,1.1,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTtuesB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTtuesB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTwedsB1LONG = array.from(0.8,0.9,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTwedsB1SHORT = array.from(1.1,1.2,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTwedsB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTwedsB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTthursB1LONG = array.from(0.8,0.9,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTthursB1SHORT = array.from(1,1.1,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTthursB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTthursB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTfriB1LONG = array.from(1.1,1.2,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTfriB1SHORT = array.from(1.2,1.3,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTfriB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_ODR_EXTfriB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_ODR_TMEmonB1LONG = array.from(22800000,29700000,30300000,29700000,30300000,18300000,18000000,18600000,16200000,16800000,na,na)
var DAX_ODR_TMEmonB1SHORT = array.from(21300000,29700000,30300000,29700000,30300000,19200000,16200000,16800000,14400000,15000000,na,na)
var DAX_ODR_TMEmonB2LONG = array.from(na,29700000,30300000,29700000,30300000,na,na,na,na,na,na,na)
var DAX_ODR_TMEmonB2SHORT = array.from(na,29700000,30300000,29700000,30300000,na,na,na,na,na,na,na)
var DAX_ODR_TMEtuesB1LONG = array.from(22200000,29700000,30300000,29700000,30300000,17400000,16200000,16800000,na,na,na,na)
var DAX_ODR_TMEtuesB1SHORT = array.from(20400000,29700000,30300000,29700000,30300000,18900000,15300000,15900000,na,na,na,na)
var DAX_ODR_TMEtuesB2LONG = array.from(na,29700000,30300000,29700000,30300000,na,na,na,na,na,na,na)
var DAX_ODR_TMEtuesB2SHORT = array.from(na,29700000,30300000,29700000,30300000,na,na,na,na,na,na,na)
var DAX_ODR_TMEwedsB1LONG = array.from(21300000,29700000,30300000,29700000,30300000,18600000,16200000,16800000,15300000,15900000,na,na)
var DAX_ODR_TMEwedsB1SHORT = array.from(21300000,29700000,30300000,29700000,30300000,19800000,15300000,15900000,na,na,na,na)
var DAX_ODR_TMEwedsB2LONG = array.from(na,29700000,30300000,29700000,30300000,na,na,na,na,na,na,na)
var DAX_ODR_TMEwedsB2SHORT = array.from(na,29700000,30300000,29700000,30300000,na,na,na,na,na,na,na)
var DAX_ODR_TMEthursB1LONG = array.from(23100000,29700000,30300000,29700000,30300000,18900000,17100000,17700000,15300000,15900000,na,na)
var DAX_ODR_TMEthursB1SHORT = array.from(20100000,29700000,30300000,29700000,30300000,18900000,15300000,15900000,na,na,na,na)
var DAX_ODR_TMEthursB2LONG = array.from(na,29700000,30300000,29700000,30300000,na,na,na,na,na,na,na)
var DAX_ODR_TMEthursB2SHORT = array.from(na,29700000,30300000,29700000,30300000,na,na,na,na,na,na,na)
var DAX_ODR_TMEfriB1LONG = array.from(24000000,29700000,30300000,29700000,30300000,18000000,16200000,16800000,na,na,na,na)
var DAX_ODR_TMEfriB1SHORT = array.from(20700000,29700000,30300000,29700000,30300000,19800000,16200000,16800000,na,na,na,na)
var DAX_ODR_TMEfriB2LONG = array.from(na,29700000,30300000,29700000,30300000,na,na,na,na,na,na,na)
var DAX_ODR_TMEfriB2SHORT = array.from(na,29700000,30300000,29700000,30300000,na,na,na,na,na,na,na)


var DAX_RDR_EXTmonB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTmonB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTmonB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTmonB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTtuesB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTtuesB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTtuesB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTtuesB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTwedsB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTwedsB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTwedsB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTwedsB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTthursB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTthursB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTthursB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTthursB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTfriB1LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTfriB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTfriB2LONG = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_EXTfriB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEmonB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEmonB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEmonB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEmonB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEtuesB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEtuesB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEtuesB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEtuesB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEwedsB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEwedsB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEwedsB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEwedsB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEthursB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEthursB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEthursB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEthursB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEfriB1LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEfriB1SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEfriB2LONG = array.from(na,na,na,na,na,na,na,na,na,na,na,na)
var DAX_RDR_TMEfriB2SHORT = array.from(na,na,na,na,na,na,na,na,na,na,na,na)

//
// CONFIG
//
var debug = input.bool(false, "debug")
var indicatorEnabled = input.bool(true, "Indicator Enabled")
var DREnabled = input.bool(false, "DR Enabled")
var STDExtEnabled = input.bool(false, "STD Ext Enabled")
var frillsEnabled = input.bool(false, "Frills Enabled")
var WDREnabled = input.bool(true, "WDR Enabled")
var statsEnabled = input.bool(false, "Stats Enabled")
var plotR = input.bool(false, "Plot R")
var FVGEnabled = input.bool(false, "FVG")
var display_histogram = input.bool(false, "Display DRLens Retracement Histogram")
var reverse = input.bool(false, "Reverse DRLens Retracement Histogram")
var TPSLEnabled = input.bool(false, "TP SL lines")

var ADRTimeZone = input.string("America/New_York", options=["America/New_York", "Europe/London", "Asia/Hong_Kong"])
var ADRSession = input.session("1930-2030", title="ADR DR")
var ADRFollowSession = input.session("2030-0200", title="ADR Session")

var ODRTimeZone = input.string("America/New_York", options=["America/New_York", "Europe/London", "Asia/Hong_Kong"])
var ODRSession = input.session("0300-0400", title="ODR DR") 
var ODRFollowSession = input.session("0400-0830", title="ODR Session")

var RDRTimeZone = input.string("America/New_York", options=["America/New_York", "Europe/London", "Asia/Hong_Kong"])
var RDRSession = input.session("0930-1030", title="RDR DR")
var RDRFollowSession = input.session("1030-1600", title="RDR Session")

// SIGNALS CFG
var ODRSignalsEnabled = input.bool(true, "ODRSignalsEnabled")
var RDRSignalsEnabled = input.bool(true, "RDRSignalsEnabled")
var ADRSignalsEnabled = input.bool(true, "ADRSignalsEnabled")

var fiftyfiftyEnabled = input.bool(true, "fiftyfiftyEnabled")
var DRDirectionBiasEnabled = input.bool(true, "DRDirectionBiasEnabled")
var LONGRetirementEnabled = input.bool(true, "LONGRetirementEnabled")
var SHORTRetirementEnabled = input.bool(true, "SHORTRetirementEnabled")
var CloseTradesOnSessionClose = input.bool(true, "CloseTradesOnSessionClose")
var goldfishEnabled = input.bool(true, "goldfishEnabled")
var boxClosedEntryEnabled = input.bool(true, "boxClosedEntryEnabled")
var boxClosedRetraceEntryEnabled = input.bool(false, "boxClosedRetraceEntryEnabled")

var MaxOpenTrades = input.int(1, "MaxOpenTrades")
var BE_RLevel = input.float(1.0, "BE_RLevel")
var BELevelMP = input.float(0.0, "BELevelMP")
var IDRRange_TP_Multiplier = input.float(0.5, "IDRRange_TP_Multiplier")
var DRRange_SL_Multiplier = input.float(3, "DRRange_SL_Multiplier")
var M7BSLMultiplier = input.float(1, "M7BSLMultiplier")
var Bucket1Enabled = input.bool(true, "bucket 1")
var Bucket2Enabled = input.bool(true, "bucket 2")
var MinSL = input.float(0.0, "Min 1:X")
var EntryPrice_Multiplier = input.float(0.6, "EntryPrice_Multiplier")
var maxSessionTrades = input.int(1, "maxSessionTrades")
var MonEnabled = input.bool(true, "Monday")
var TuesEnabled = input.bool(true, "Tuesday")
var WedsEnabled = input.bool(true, "Wednesday")
var ThursEnabled = input.bool(true, "Thursday")
var FriEnabled = input.bool(true, "Friday")

var RMEnabled = input.bool(true, "Ret Mode")
var R1Enabled = input.bool(true, "Ret 1")
var RTEnabled = input.bool(true, "Ret Time Over")
var TimeOver70 = input.bool(false, "Time Over 70% Ret (if not then Median)")
var M7BDirAlignedEnabled = input.bool(false, "M7 Box direction aligned")
var DRModelAlignedEnabled = input.bool(false, "DR Model aligned")
var M7BoxMinSize = input.float(0.4, "M7BoxMinSize")

var FixedRTP = input.float(0, "Fixed R TP")
var MinSLIDRPC = input.float(0, "Min IDR % SL")
var AnandStyleEnabled = input.bool(true, "limit order for min TP")
var AnandStyleEnabled2ndFilterEnabled = input.bool(false, "limit order 2nd entry if 2 entries")
var M7BFilterEnabled = input.bool(false, "Filter Trades with M7 Box")
var IncludeNewsResults = input.bool(false, "Include News Results")
var IncludeHolidayResults = input.bool(false, "Include Holiday Results")
var IncludeConfBarEntry = input.bool(false, "Include Conf Bar Entry")

var _period = timeframe.period
_time = time
_time_tradingday = time_tradingday
_bar_index = bar_index
_open = open
_high = high
_low = low
_close = close

_period_5 = "5"
_time_5 = request.security(syminfo.tickerid, _period_5, time, lookahead = barmerge.lookahead_on)
_time_tradingday_5 = request.security(syminfo.tickerid, _period_5, time_tradingday, lookahead = barmerge.lookahead_on)
_bar_index_5 = request.security(syminfo.tickerid, _period_5, bar_index, lookahead = barmerge.lookahead_on)
_open_5 = request.security(syminfo.tickerid, _period_5, open, lookahead = barmerge.lookahead_on)
_high_5 = request.security(syminfo.tickerid, _period_5, high, lookahead = barmerge.lookahead_on)
_low_5 = request.security(syminfo.tickerid, _period_5, low, lookahead = barmerge.lookahead_on)
_close_5 = request.security(syminfo.tickerid, _period_5, close, lookahead = barmerge.lookahead_on)

_open_5_l = request.security_lower_tf(syminfo.tickerid, _period_5, open)
_high_5_l = request.security_lower_tf(syminfo.tickerid, _period_5, high)
_low_5_l = request.security_lower_tf(syminfo.tickerid, _period_5, low)
_close_5_l = request.security_lower_tf(syminfo.tickerid, _period_5, close)

var use_lower_tf = false

if str.tonumber(timeframe.period) < 5
    _period := _period_5
    _time := _time_5
    _time_tradingday := _time_tradingday_5
    _bar_index := _bar_index_5
    _open := _open_5
    _high := _high_5
    _low := _low_5
    _close := _close_5

if str.tonumber(timeframe.period) > 5 and array.size(_open_5_l) > 0
    use_lower_tf := true

//
// FUNCTIONS
//

SessionLevels(sessionTime, sessionTimeZone, isDRFormation) =>
    insideSession = not na(time(_period, sessionTime, sessionTimeZone))
    var float SessionLowPrice = na
    var float SessionHighPrice = na
    var float SessionMaxOC = na
    var float SessionMinOC = na
    var float SessionMaxClose = na
    var float SessionMinClose = na
    var float SessionOpen = na
    //var float SessionClose = na
    SessionClose = float(na)

    if insideSession and not insideSession[1]
        if not use_lower_tf
            SessionLowPrice := _low
            SessionHighPrice := _high
            SessionMaxOC := math.max(_open, _close)
            SessionMinOC := math.min(_open, _close)
            SessionMaxClose := _close
            SessionMinClose := _close
            SessionOpen := _open
        else
            SessionLowPrice := array.min(_low_5_l)
            SessionHighPrice := array.max(_high_5_l)
            SessionMaxOC := math.max(array.max(_open_5_l), array.max(_close_5_l))
            SessionMinOC := math.min(array.min(_open_5_l), array.min(_close_5_l))
            SessionMaxClose := array.max(_close_5_l)
            SessionMinClose := array.min(_close_5_l)
            SessionOpen := _open
    else if insideSession
        if not use_lower_tf
            SessionLowPrice := math.min(SessionLowPrice, _low)
            SessionHighPrice := math.max(SessionHighPrice, _high)
            SessionMaxOC := math.max(SessionMaxOC, _open, _close)
            SessionMinOC := math.min(SessionMinOC, _open, _close)
            SessionMaxClose := math.max(SessionMaxClose, _close)
            SessionMinClose := math.min(SessionMinClose, _close)
        else
            SessionLowPrice := math.min(SessionLowPrice, array.min(_low_5_l))
            SessionHighPrice := math.max(SessionHighPrice, array.max(_high_5_l))
            SessionMaxOC := math.max(SessionMaxOC, _open, array.max(_close_5_l))
            SessionMinOC := math.min(SessionMinOC, _open, array.min(_close_5_l))
            SessionMaxClose := math.max(SessionMaxClose, array.max(_close_5_l))
            SessionMinClose := math.min(SessionMinClose, array.min(_close_5_l))
    if isDRFormation
        if (sessionTime == "0300-0400" and not na(time(_period, "0355-0400", "America/New_York"))) or (sessionTime == "0930-1030" and not na(time(_period, "1025-1030", "America/New_York"))) or (sessionTime == "1930-2030" and not na(time(_period, "2025-2030", "America/New_York")))
            SessionClose := _close_5
    else if insideSession[1] and not insideSession
        SessionClose := _close_5[1]
    [SessionLowPrice, SessionHighPrice, SessionMaxOC, SessionMinOC, SessionMaxClose, SessionMinClose, SessionOpen, SessionClose]

InSession(SessionTimes, sessionTimeZone) =>
    not na(time(_period, SessionTimes, sessionTimeZone))


// DR/IDR session result
GetResult_LowBreak(arr) =>
    array.get(arr, 0)

GetResult_HighBreak(arr) =>
    array.get(arr, 1)

GetResult_OneSideBreak(arr) =>
    array.get(arr, 2)

GetResult_NoSidesBroke(arr) =>
    array.get(arr, 3)

GetResult_BothSidesBroke(arr) =>
    array.get(arr, 4)

GetResult_DayOfWeek(arr) =>
    array.get(arr, 5)

GetResult_MaxExcrusionLONG(arr) =>
    array.get(arr, 6)

GetResult_MaxExcursionSHORT(arr) =>
    array.get(arr, 7)

GetResult_DRRange(arr) =>
    array.get(arr, 8)

GetResult_CloseDRPC(arr) =>
    array.get(arr, 9)

GetResult_Error(arr) =>
    array.get(arr, 10)

// Trade Signal array.from(bar_index, time, open, high, low, close, float(na), TPPrice, SLPrice, 0))
GetSignal_BarIndex(arr) =>
    array.get(arr, 0)

GetSignal_Time(arr) =>
    array.get(arr, 1)

GetSignal_CandleOpen(arr) =>
    array.get(arr, 2)

GetSignal_CandleHigh(arr) =>
    array.get(arr, 3)

GetSignal_CandleLow(arr) =>
    array.get(arr, 4)

GetSignal_CandleClose(arr) =>
    array.get(arr, 5)

GetSignal_WinLose(arr) =>
    array.get(arr, 6)

SetSignal_Matrix_BarWinLose(mat, index, val) =>
    matrix.set(mat,index, 6, val)

GetSignal_TP(arr) =>
    array.get(arr, 7)

GetSignal_SL(arr) =>
    array.get(arr, 8)

SetSignal_Matrix_SL(mat, index, val) =>
    matrix.set(mat,index, 8, val)

GetSignal_Direction(arr) =>
    array.get(arr, 9)

GetSignal_GetOneR(arr) =>
    array.get(arr, 10)


RunDR(DRSession, FollowSession, TimeZone) =>
    var results = matrix.new<float>(0, 11)
    bool latest_result = na
    InFollowSession = InSession(FollowSession, TimeZone)

    [DRLow, DRHigh, IDRHigh, IDRLow, MaxClose, MinClose, DROpen,DRClose] = SessionLevels(DRSession, TimeZone, true)
    [SessionLow, SessionHigh, SessionMaxOC, SessionMinOC, SessionMaxClose, SessionMinClose,SessionOpen,SessionClose] = SessionLevels(FollowSession, TimeZone, false)
    IDRRange = IDRHigh - IDRLow
    IDRMid = IDRLow + (IDRRange/2)

    // work our result after session has ended
    if not InFollowSession and InFollowSession[1]
        error = 0
        DRRangeBreak_PC = 0.0
        IDRRangeBreak_PC = 0.0
        DRRange = DRHigh - DRLow
        DRBrokenLow = SessionMinClose < DRLow ? 1:0 //SessionMinClose SessionLow
        DRBrokenHigh  = SessionMaxClose > DRHigh ? 1:0 //SessionMaxClose SessionHigh
        OneSideHeld = (DRBrokenLow and not DRBrokenHigh) or (not DRBrokenLow and DRBrokenHigh) ? 1:0
        NoSidesBroke = not DRBrokenLow and not DRBrokenHigh ? 1:0
        BothSidesBroke = DRBrokenLow and DRBrokenHigh ? 1:0
        DayOfWeek = dayofweek(_time[1], TimeZone) // UK100 and DE40 data ends at 20:55 bar - i.e. next bar is 1am next day so need to record prior bar to calculate trading day
        close_DR_Range_PC = float(na)

        // where did we close relative to DR High or Low depending on break direction
        if OneSideHeld == 1
            close_diff = float(na)
            if DRBrokenHigh
                close_diff := _close[1] - DRHigh
            else
                close_diff := DRLow - _close[1]

            close_DR_Range_PC := (close_diff / DRRange) * 100

        if DayOfWeek != dayofweek.saturday and DayOfWeek != dayofweek.sunday // sometimes get a session on a sunday for some reason
            if OneSideHeld
                if DRBrokenHigh
                    DRRangeBreak_PC := ((SessionHigh - DRHigh) / DRRange) * 100
                    IDRRangeBreak_PC := ((SessionHigh - IDRHigh) / IDRRange) * 100
                else
                    DRRangeBreak_PC := ((DRLow - SessionLow) / DRRange) * 100
                    IDRRangeBreak_PC := ((IDRLow - SessionLow) / IDRRange) * 100

            if OneSideHeld == 0 and NoSidesBroke == 0 and BothSidesBroke == 0 
                error := _time_tradingday[1] 
            matrix.add_row(results, matrix.rows(results), array.from(DRBrokenLow, DRBrokenHigh, OneSideHeld, NoSidesBroke, BothSidesBroke, DayOfWeek, math.round(IDRRangeBreak_PC), math.round(IDRRangeBreak_PC), DRRange, close_DR_Range_PC, error))

        if matrix.rows(results) > 0
            latest_result := (not InFollowSession and InFollowSession[1]) and GetResult_OneSideBreak(matrix.row(results, matrix.rows(results)-1))

    [InSession(DRSession, TimeZone),latest_result,not na(DRClose)? DRLow:na,not na(DRClose)?DRHigh:na,not na(DRClose)?IDRLow:na,not na(DRClose)?IDRHigh:na,not na(DRClose)?IDRMid:na,not na(DRClose)?DROpen:na,not na(DRClose)?DRClose:na, results]

CalculateResults(results) =>
    error = ""
    num_single_breaks = 0
    num_no_breaks = 0
    num_both_breaks = 0
    num_sessions = matrix.rows(results)
    monday_count = 0
    tuesday_count = 0
    wednesday_count = 0
    thursday_count = 0
    friday_count = 0
    num_close_pos = 0
    num_days = 0
    var MaxIDRExcusionPCLONG = array.new<float>()
    var MaxIDRExcusionPCSHORT = array.new<float>()
    var DRClosePCLONG = array.new<float>()
    var DRClosePCSHORT = array.new<float>()

    array.clear(MaxIDRExcusionPCLONG)
    array.clear(MaxIDRExcusionPCSHORT)

    for i = 0 to num_sessions-1
        num_days += 1
        result = matrix.row(results, i)

        error_code = GetResult_Error(result)
        if error_code != 0
            error += "code:"+str.tostring(error_code)+"\n"
        if GetResult_NoSidesBroke(result) == 1
            num_no_breaks += 1
        else if GetResult_BothSidesBroke(result) == 1
            num_both_breaks += 1
        else if GetResult_OneSideBreak(result) == 1
            num_single_breaks += 1

            if GetResult_HighBreak(result)
                array.push(MaxIDRExcusionPCLONG, GetResult_MaxExcrusionLONG(result))
                array.push(DRClosePCLONG, GetResult_CloseDRPC(result))
                if GetResult_CloseDRPC(result) > 0
                    num_close_pos += 1
                    array.push(DRClosePCLONG, GetResult_CloseDRPC(result))

            else if GetResult_LowBreak(result)
                array.push(MaxIDRExcusionPCSHORT, GetResult_MaxExcursionSHORT(result))
                
                if GetResult_CloseDRPC(result) > 0 // close below DR range should be counted as positive as its in the confirmed direction
                    num_close_pos += 1
                    array.push(DRClosePCSHORT, GetResult_CloseDRPC(result))

            DayOfWeek = GetResult_DayOfWeek(result)

            if DayOfWeek == dayofweek.monday
                monday_count += 1
            else if DayOfWeek == dayofweek.tuesday
                tuesday_count += 1
            else if DayOfWeek == dayofweek.wednesday
                wednesday_count += 1
            else if DayOfWeek == dayofweek.thursday
                thursday_count += 1
            else if DayOfWeek == dayofweek.friday
                friday_count += 1
            else
                error += "day error "+str.tostring(DayOfWeek)+"\n"
        else
            error += "result logic error\n"

    pc_one_side_break = (num_single_breaks / num_days) * 100
    pc_no_sides_broke = (num_no_breaks / num_days) * 100
    pc_both_sides_broke = (num_both_breaks / num_days) * 100

    if num_days != num_single_breaks + num_no_breaks + num_both_breaks
        error += "day error days "+str.tostring(num_days)+"!= breaks"+str.tostring(num_single_breaks + num_no_breaks + num_both_breaks)+"\n"

    pc_mon = (monday_count / num_single_breaks) * 100
    pc_tues = (tuesday_count / num_single_breaks) * 100
    pc_weds = (wednesday_count / num_single_breaks) * 100
    pc_thurs = (thursday_count / num_single_breaks) * 100
    pc_fri = (friday_count / num_single_breaks) * 100

    pc_pos_close = (num_close_pos/num_single_breaks) * 100

    [num_days,pc_one_side_break, pc_no_sides_broke, pc_both_sides_broke, pc_mon,pc_tues,pc_weds,pc_thurs,pc_fri,array.avg(MaxIDRExcusionPCLONG),array.avg(MaxIDRExcusionPCSHORT),array.stdev(MaxIDRExcusionPCLONG),array.stdev(MaxIDRExcusionPCSHORT),array.avg(DRClosePCLONG),array.avg(DRClosePCSHORT),array.stdev(DRClosePCLONG),array.stdev(DRClosePCSHORT), pc_pos_close, error]


CalcPosSize(entry_price, stop) =>
    pointValue = syminfo.pointvalue
    diff = math.abs(entry_price - stop)
    EquityRisked = 1200
    EquityRisked/(diff*pointValue)
    
//
// SCRIPT START
//

var signals = matrix.new<float>(0, 11)
var win = 0.0
var lose = 0.0
var WinRTotal = 0.0
var LoseRTotal = 0.0
var BECount = 0

// Calculate levels and session results
[ADRInSession,ADRPostSessionSuccess,ADRLow,ADRHigh,AIDRLow,AIDRHigh,AIDRMid,ADROpen,ADRClose,ADRResults] = RunDR(ADRSession, ADRFollowSession, ADRTimeZone)
[ODRInSession,ODRPostSessionSuccess,ODRLow,ODRHigh,OIDRLow,OIDRHigh,OIDRMid,ODROpen,ODRClose,ODRResults] = RunDR(ODRSession, ODRFollowSession, ODRTimeZone)
[RDRInSession,RDRPostSessionSuccess,RDRLow,RDRHigh,RIDRLow,RIDRHigh,RIDRMid,RDROpen,RDRClose,RDRResults] = RunDR(RDRSession, RDRFollowSession, RDRTimeZone)

var WDRHigh = float(na)
var WDRLow = float(na)
var WDROpen = float(na)
var WDRMid = float(na)

if RDRInSession and dayofweek(_time[1], RDRTimeZone) == dayofweek.tuesday
    WDRHigh := float(na)
    WDRLow := float(na)
    WDROpen := float(na)
    WDRMid := float(na)

if not RDRHigh[1] and RDRHigh and dayofweek(_time[1], RDRTimeZone) == dayofweek.tuesday
    WDRHigh := RDRHigh
    WDRLow := RDRLow
    WDROpen := RDROpen
    WDRMid := RIDRMid

ODRInFollowSession = not na(ODRLow)
RDRInFollowSession = not na(RDRLow)
ADRInFollowSession = not na(ADRLow)

var LastAIDRHigh = 0.0
var LastAIDRMid = 0.0
var LastAIDRLow = 0.0

var LastOIDRHigh = 0.0
var LastOIDRMid = 0.0
var LastOIDRLow = 0.0
var DRModel = ""

var boxClosedRetracePrice = 0.0

if ODRInFollowSession
    LastOIDRHigh := OIDRHigh
    LastOIDRMid  := OIDRMid
    LastOIDRLow := OIDRLow

if ADRInFollowSession
    LastAIDRHigh := AIDRHigh
    LastAIDRMid  := AIDRMid
    LastAIDRLow := AIDRLow

SignalNow = false
var SessionHighBroken = false
var SessionLowBroken = false
var SessionHighWicked = false
var SessionLowWicked = false

GetValid(a,b,c) =>
    d = math.max(a?a:0,b?b:0,c?c:0)
    d > 0 ? d : na

_DROpen = GetValid(ADROpen,ODROpen,RDROpen)
_DRClose = GetValid(ADRClose,ODRClose,RDRClose)
_DRHigh = GetValid(ADRHigh,ODRHigh,RDRHigh)
_DRLow = GetValid(ADRLow,ODRLow,RDRLow)
_IDRLow = GetValid(AIDRLow,OIDRLow,RIDRLow)
_IDRHigh = GetValid(AIDRHigh,OIDRHigh,RIDRHigh)
_IDRMid = GetValid(AIDRMid,OIDRMid,RIDRMid)
_InSession = GetValid(ADRInSession?1:0, ODRInSession?1:0, RDRInSession?1:0)
_InFollowSession = GetValid(ADRInFollowSession?1:0, ODRInFollowSession?1:0, RDRInFollowSession?1:0)
_PostSessionSuccess = GetValid(ADRPostSessionSuccess?1:0, ODRPostSessionSuccess?1:0, RDRPostSessionSuccess?1:0)
_IDRange = _IDRHigh-_IDRLow
_IDRangeHalf = _IDRange/2
_M7BRange = math.abs(_DROpen-_DRClose)
_M7BHigh = _DROpen > _DRClose ? _DROpen : _DRClose
_M7BLow = _DROpen < _DRClose ? _DROpen : _DRClose
_DRM7BMid = 0.0
_M7BDir = _DROpen > _DRClose ? -1 : _DROpen < _DRClose ? 1 : 0
if _M7BHigh == _M7BLow
    _DRM7BMid := _M7BHigh
else 
    _DRM7BMid := _M7BHigh - (_M7BRange/2)

if RDRInFollowSession
    DRModel := "expansion"
    if RIDRLow >= LastOIDRMid
        DRModel := "upside"
    if RIDRHigh <= LastOIDRMid
        DRModel := "downside"
    if RIDRHigh <= LastOIDRHigh and RIDRLow >= LastOIDRLow
        DRModel := "contraction"

if ODRInFollowSession
    DRModel := "expansion"
    if OIDRLow >= LastAIDRMid
        DRModel := "upside"
    if OIDRHigh <= LastAIDRMid
        DRModel := "downside"
    if OIDRHigh <= LastAIDRHigh and OIDRLow >= LastAIDRLow
        DRModel := "contraction"


SessionJustStarted = false
if (not ODRInFollowSession[1] and ODRInFollowSession) or (not RDRInFollowSession[1] and RDRInFollowSession) or (not ADRInFollowSession[1] and ADRInFollowSession)
    SessionJustStarted := true

if _InSession
    SessionHighBroken := false
    SessionLowBroken := false
    SessionHighWicked := false
    SessionLowWicked := false

if _close > _DRHigh
    SessionHighBroken := true
if _close < _DRLow
    SessionLowBroken := true

if _high > _DRHigh
    SessionHighWicked := true
if _low < _DRLow
    SessionLowWicked := true

SessionJustFinished = false
if (ODRInFollowSession[1] and not ODRInFollowSession) or (RDRInFollowSession[1] and not RDRInFollowSession) or (ADRInFollowSession[1] and not ADRInFollowSession)
    strategy.cancel("long")
    strategy.cancel("short")
    SessionJustFinished := true

indicatorAndFrills = frillsEnabled and indicatorEnabled or (RDRInFollowSession and WDREnabled and dayofweek(_time[1], RDRTimeZone) == dayofweek.tuesday)

// plot DR breaks
plotshape(indicatorAndFrills and SessionHighBroken and not SessionHighBroken[1], location=location.abovebar, style=shape.labelup, size=size.normal, color=color.green)
plotshape(indicatorAndFrills and SessionLowBroken and not SessionLowBroken[1], location=location.belowbar, style=shape.labeldown, size=size.normal, color=color.red)

// Plot DR
SessionColour = color.black
if ADRInSession
    SessionColour := color.new(#12d400, 90)
if ODRInSession
    SessionColour := color.new(#d40047, 90)
if RDRInSession
    SessionColour := color.new(#0055d4, 90)

bgcolor(indicatorAndFrills and _InSession ? SessionColour : na)
bgcolor(indicatorAndFrills and _PostSessionSuccess ? color.rgb(76, 175, 79, 50) : na, -1)

indicatorDREnabled = indicatorEnabled and DREnabled or (ODRInFollowSession and WDREnabled and dayofweek(_time[1], RDRTimeZone) == dayofweek.wednesday)

plot(indicatorDREnabled ? _DROpen : na, color=color.rgb(10, 71, 37, 20), title="DROpen", style=plot.style_linebr)
plot(indicatorDREnabled ? _DRLow : na, color=color.red, title="DRLow", style=plot.style_linebr)
plot(indicatorDREnabled ? _DRHigh : na, color=color.green, title="DRHigh", style=plot.style_linebr)
plot(indicatorDREnabled ? _IDRLow : na, color=color.gray, title="IDRLow", style=plot.style_linebr)
plot(indicatorDREnabled ? _IDRHigh : na, color=color.gray, title="IDRHigh", style=plot.style_linebr)
plot(indicatorDREnabled ? _IDRMid : na, color=color.rgb(120, 123, 134, 50), title="IDRMid", style=plot.style_linebr)
plot(indicatorDREnabled and STDExtEnabled ? _IDRangeHalf+_IDRHigh : na, color=color.rgb(178, 181, 190, 75), style=plot.style_linebr, title="IDR +0.5")
plot(indicatorDREnabled and STDExtEnabled ? _IDRangeHalf*2+_IDRHigh : na, color=color.rgb(178, 181, 190, 75), style=plot.style_linebr, title="IDR+ 1.0")
plot(indicatorDREnabled and STDExtEnabled ? _IDRangeHalf*3+_IDRHigh : na, color=color.rgb(178, 181, 190, 75), style=plot.style_linebr, title="IDR +1.5")
plot(indicatorDREnabled and STDExtEnabled ? _IDRangeHalf*4+_IDRHigh : na, color=color.rgb(178, 181, 190, 75), style=plot.style_linebr, title="IDR + 2.0")
plot(indicatorDREnabled and STDExtEnabled ? _IDRLow-_IDRangeHalf : na, color=color.rgb(178, 181, 190, 75), style=plot.style_linebr, title="IDR - 0.5")
plot(indicatorDREnabled and STDExtEnabled ? _IDRLow-_IDRangeHalf*2 : na, color=color.rgb(178, 181, 190, 75), style=plot.style_linebr, title="IDR - 1.0")
plot(indicatorDREnabled and STDExtEnabled ? _IDRLow-_IDRangeHalf*3 : na, color=color.rgb(178, 181, 190, 75), style=plot.style_linebr, title="IDR - 1.5")
plot(indicatorDREnabled and STDExtEnabled ? _IDRLow-_IDRangeHalf*4 : na, color=color.rgb(178, 181, 190, 75), style=plot.style_linebr, title="IDR - 2.0")

indicatorAndWDR = indicatorEnabled and WDREnabled
plot(indicatorAndWDR ? WDRHigh : na, color=color.teal, title="WDRHigh", style=plot.style_linebr, linewidth=2)
plot(indicatorAndWDR ? WDRMid : na, color=color.rgb(0, 94, 137), title="WDRMid", style=plot.style_linebr, linewidth=2)
plot(indicatorAndWDR ? WDROpen : na, color=color.rgb(0, 137, 37), title="WDROpen", style=plot.style_linebr, linewidth=2)
plot(indicatorAndWDR ? WDRLow : na, color=color.teal, title="WDRLow", style=plot.style_linebr, linewidth=2)

if na(WDRMid) and not na(WDRMid[1])
    line.new(bar_index, WDRMid[1], bar_index+10, WDRMid[1], extend=extend.right, color=color.teal, style=line.style_dashed)

var sessionTrades = 0

if _InSession and not _InSession[1]
    boxClosedRetracePrice := 0.0
    sessionTrades := 0

    log.warning("boxClosedRetraceEntryEnabled reset")

if _InSession[1] and not _InSession
    var buckets = array.new<box>()
    var bucket_vals = array.new<float>()
    var box b_00 = na
    var box b_01 = na
    var len_t = 60 * 60 *1000 * 2// 2 hours
    var num_buckets = 10
    var max_len = 10
    var v_00 = input.int(3, "v1")
    var v_01 = input.int(2, "v2")
    var v_02 = input.int(4, "v3")
    var v_03 = input.int(8, "v4")
    var v_04 = input.int(5, "v5")
    var v_05 = input.int(5, "v6")
    var v_06 = input.int(2, "v7")
    var v_07 = input.int(2, "v8")
    var v_08 = input.int(7, "v9")
    var v_09 = input.int(5, "v10")

    if display_histogram
        w = (_IDRHigh - _IDRLow) / num_buckets

        if reverse
            array.reverse(bucket_vals)

        if array.size(bucket_vals) == 0
            array.push(bucket_vals, len_t * (v_00 / max_len))
            array.push(bucket_vals, len_t * (v_01 / max_len))
            array.push(bucket_vals, len_t * (v_02 / max_len))
            array.push(bucket_vals, len_t * (v_03 / max_len))
            array.push(bucket_vals, len_t * (v_04 / max_len))
            array.push(bucket_vals, len_t * (v_05 / max_len))
            array.push(bucket_vals, len_t * (v_06 / max_len))
            array.push(bucket_vals, len_t * (v_07 / max_len))
            array.push(bucket_vals, len_t * (v_08 / max_len))
            array.push(bucket_vals, len_t * (v_09 / max_len))

        if array.size(buckets) > 0
            for i = 0 to array.size(buckets)-1
                box.delete(array.get(buckets, i))

        for i = 0 to num_buckets-1
            t = _IDRHigh - (w * i)
            b = box.new(time, t, time + int(array.get(bucket_vals, i)), t - w, xloc=xloc.bar_time,border_width=1)
            box.set_bgcolor(b, color.rgb(24, 49, 25, 64))
            array.push(buckets, b)

var debugVar = 0.0

Signal_RecordResult(signals, signal, index, price, direction) =>
    localDebugVar = 0
    tradeResult = 0
    winR = 0.0
    signalOpenPrice = GetSignal_CandleClose(signal)
    priceDiff = math.abs(price - signalOpenPrice)

    if GetSignal_WinLose(signal) == 2
        log.warning("Was set to BE")

    if price == signalOpenPrice // BE
        tradeResult := 1
        SetSignal_Matrix_BarWinLose(signals, index, 1.0)
        log.warning("WinLose BE")
    else 
        if direction == 1 //LONG
            if price > signalOpenPrice
                tradeResult := 1
                winR := priceDiff / GetSignal_GetOneR(signal)
                SetSignal_Matrix_BarWinLose(signals, index, 1.0)
                log.warning("WinLose Win")
            else if price < signalOpenPrice
                tradeResult := -1
                SetSignal_Matrix_BarWinLose(signals, index, 0.0)
                log.warning("WinLose Lose")
            else
                tradeResult := -2
        else // SHORT
            if price < signalOpenPrice
                tradeResult := 1
                winR := priceDiff / GetSignal_GetOneR(signal)
                SetSignal_Matrix_BarWinLose(signals, index, 1.0)
                log.warning("WinLose Win")
            else if price > signalOpenPrice
                tradeResult := -1
                SetSignal_Matrix_BarWinLose(signals,index, 0.0)
                log.warning("WinLose Lose")
            else
                tradeResult := -2
    log.error("Signal_RecordResult price: {0} priceDiff:{1,number,#.####} winR:{2,number,#.##}, sigOpenPrice:{3,number,#.####}, 1R:{4,number,#.####} tradeResult {5}", price, priceDiff, winR, signalOpenPrice, GetSignal_GetOneR(signal), tradeResult)
    [tradeResult, winR, localDebugVar]

signalResult = bool(na)

// Process Open Trades
if matrix.rows(signals) > 0
    for i = 0 to matrix.rows(signals)-1
        winR = 0.0
        loseR = 0.0
        localResult = 0
        
        signal = matrix.row(signals, i)

        if _bar_index > GetSignal_BarIndex(signal) and (na(GetSignal_WinLose(signal)) or GetSignal_WinLose(signal) == 2) // signal is past the entry bar and not closed na is open (not won or lost) 2 is open and moved to BE
            if GetSignal_Direction(signal) == 1 // LONG
                if SessionJustFinished and CloseTradesOnSessionClose // session just closed - close trade?
                    strategy.close_all("close all session end - LONG")
                    [_localResult, _winR, _debugVar] = Signal_RecordResult(signals, signal, i, _close[1], 1)
                    localResult := _localResult, winR := _winR
                else if _high >= GetSignal_TP(signal)
                    [_localResult, _winR, _debugVar] = Signal_RecordResult(signals, signal, i, GetSignal_TP(signal), 1)
                    localResult := _localResult, winR := _winR                                   
                else if _low <= GetSignal_SL(signal)
                    [_localResult, _winR, _debugVar] = Signal_RecordResult(signals, signal, i, GetSignal_SL(signal), 1)
                    localResult := _localResult, winR := _winR                      
            else if GetSignal_Direction(signal) == 0 // SHORT
                if SessionJustFinished and CloseTradesOnSessionClose // session just closed - close trade?
                    strategy.close_all("close all session end - SHORT")
                    [_localResult, _winR, _debugVar] = Signal_RecordResult(signals, signal, i, _close[1], 0)
                    localResult := _localResult, winR := _winR            
                else if _low <= GetSignal_TP(signal)
                    [_localResult, _winR, _debugVar] = Signal_RecordResult(signals, signal, i, GetSignal_TP(signal), 0)
                    localResult := _localResult, winR := _winR                     
                else if _high >= GetSignal_SL(signal)
                    [_localResult, _winR, _debugVar] = Signal_RecordResult(signals, signal, i, GetSignal_SL(signal), 0)
                    localResult := _localResult, winR := _winR 

            if localResult == -1 or localResult == 1
                debugVar += 1
                signalResult := localResult==1? true : localResult==-1?false : bool(na)

                if signalResult == true
                    win += 1
                    WinRTotal += winR
                    if winR == BELevelMP
                        BECount += 1
                else if signalResult == false
                    lose += 1
                    LoseRTotal += 1
            else 
                if localResult == -2
                    err = "something very wrong"
                // trade still open - move to BE?
                else if BE_RLevel > 0
                    priceDiff = float(na)
                    signalOpenPrice = GetSignal_CandleClose(signal)
                    if GetSignal_Direction(signal) == 1 and _high > GetSignal_CandleClose(signal)
                        priceDiff := math.abs(_high - signalOpenPrice)
                    else if GetSignal_Direction(signal) == 0 and _low < GetSignal_CandleClose(signal)
                        priceDiff := math.abs(_low - signalOpenPrice)

                    currentR = priceDiff / GetSignal_GetOneR(signal)
                    
                    if currentR >= BE_RLevel and na(GetSignal_WinLose(signal)) // i.e. not is still na and not set to 2 to indicate its been moved already
                        newSLLevel = GetSignal_CandleClose(signal)
                        if GetSignal_Direction(signal) == 1
                            newSLLevel := signalOpenPrice + (GetSignal_GetOneR(signal) * BELevelMP)
                        else
                            newSLLevel := signalOpenPrice - (GetSignal_GetOneR(signal) * BELevelMP)
                        
                        log.error("Moved to BE newSLLevel: {0} BELevelMP: {1} currentR: {2}", newSLLevel, BELevelMP, currentR)
                        SetSignal_Matrix_SL(signals, i, newSLLevel)
                        SetSignal_Matrix_BarWinLose(signals, i, 2.0)

                        signal := matrix.row(signals, i)
                        if GetSignal_Direction(signal) == 1 // LONG
                            strategy.exit("long-exit", "long", stop=newSLLevel, limit=GetSignal_TP(signal))
                            //if SessionJustFinished and CloseTradesOnSessionClose // session just closed - close trade?
                            //    [_localResult, _winR, _debugVar] = Signal_RecordResult(signals, signal, i, _close[1], 1)
                            //    localResult := _localResult, winR := _winR
                            //else if _high >= GetSignal_TP(signal)
                            //    [_localResult, _winR, _debugVar] = Signal_RecordResult(signals, signal, i, GetSignal_TP(signal), 1)
                            //    localResult := _localResult, winR := _winR                                   
                            //else if _low <= GetSignal_SL(signal)
                            //    [_localResult, _winR, _debugVar] = Signal_RecordResult(signals, signal, i, GetSignal_SL(signal), 1)
                            //    localResult := _localResult, winR := _winR                      
                        else if GetSignal_Direction(signal) == 0 // SHORT
                            strategy.exit("short-exit", "short", stop=newSLLevel, limit=GetSignal_TP(signal))
                            //if SessionJustFinished and CloseTradesOnSessionClose // session just closed - close trade?
                            //    [_localResult, _winR, _debugVar] = Signal_RecordResult(signals, signal, i, _close[1], 0)
                            //    localResult := _localResult, winR := _winR            
                            //else if _low <= GetSignal_TP(signal)
                            //    [_localResult, _winR, _debugVar] = Signal_RecordResult(signals, signal, i, GetSignal_TP(signal), 0)
                            //    localResult := _localResult, winR := _winR                     
                            //else if _high >= GetSignal_SL(signal)
                            //    [_localResult, _winR, _debugVar] = Signal_RecordResult(signals, signal, i, GetSignal_SL(signal), 0)
                            //    localResult := _localResult, winR := _winR 

                        //if localResult == -1 or localResult == 1
                        //    debugVar += 1
                        //    signalResult := localResult==1? true : localResult==-1?false : bool(na)

                            //if signalResult == true
                            //    win += 1
                            //    WinRTotal += winR
                            //else if signalResult == false
                            //    lose += 1
                            //    LoseRTotal += 1
                        //else 
                            //if localResult == -2
                            //    err = "something very wrong"

// plot signal bars
BE = WinRTotal == WinRTotal[1] and signalResult == true
bgcolor(indicatorAndFrills and SignalNow? color.new(#e9fc42, 80) : na)
bgcolor(indicatorAndFrills and signalResult == true? BE? color.rgb(0, 187, 212, 80) : color.rgb(76, 175, 79, 80) : na)
bgcolor(indicatorAndFrills and signalResult == false? color.rgb(255, 82, 82, 80) : na)

// debugging data
plot(debug?debugVar:na,"debugVar")
plot(debug?matrix.rows(signals):na, "signals")
plot(debug?(signalResult == bool(na)?1:0):na, "signalResult")
plot(debug?win:na, "win")
plot(debug?lose:na, "lose")
plot(debug?win-lose:na, "win-lose")
plot(debug?WinRTotal:na, "WinRTotal")
plot(debug?LoseRTotal:na, "LoseRTotal")
plot(debug or plotR ?WinRTotal-LoseRTotal:na, "TotalR")
plot(debug?SessionHighBroken?1:0:na,"SessionHighBroken")
plot(debug?SessionLowBroken?1:0:na,"SessionLowBroken")
plot(plotR ?0:na, "0R", color = color.white)
plot(plotR ?WinRTotal-LoseRTotal:na, "TotalRBar", style = plot.style_columns)

/// FVG
if indicatorEnabled and FVGEnabled
    var fvg_list = array.new<box>()
    fvg_t = -1.0
    fvg_b = -1.0

    if low[2] > high[0]
        fvg_t := low[2]
        fvg_b := high[0]

    if low[0] > high[2]
        fvg_t := low[0]
        fvg_b := high[2]
    if fvg_t != -1 and fvg_b != -1
        if array.size(fvg_list) > 1000
            box.delete(array.remove(fvg_list, 0))

        fvg = box.new(bar_index, fvg_t, bar_index + 5, fvg_b, xloc=xloc.bar_index,border_width=0)
        box.set_bgcolor(fvg, color.rgb(74, 183, 216, 51))
        array.push(fvg_list, fvg)

midnight = timestamp("America/New_York", day=dayofmonth, month=month, year=year)

DrawTargetBox(dir, TorR, ts, te, ps, pe) =>
    b = box.new(na,na,na,na)
    psa = float(na)
    pea = float(na)

    if not na(ts) and not na(te) and not na(ps) and not na(pe)

        if dir == 1
            psa := _IDRHigh+(ps*_IDRange)
            pea := _IDRHigh+(pe*_IDRange)
        else if dir == -1
            psa := _IDRLow-(ps*_IDRange)
            pea := _IDRLow-(pe*_IDRange)

        if dir != 0
            b := box.new(midnight+ts, psa, midnight+te,pea, border_width=0,xloc=xloc.bar_time)
            if TorR == 1
                box.set_bgcolor(b, color.rgb(76, 175, 79, 70))
            else
                box.set_bgcolor(b, color.rgb(255, 82, 82, 70))
    [b, psa, pea]

dir = SessionHighBroken and not SessionHighBroken[1] ? 1 : SessionLowBroken and not SessionLowBroken[1] ? -1 : 0
dirWicked = SessionHighWicked and not SessionHighWicked[1] ? 1 : SessionLowWicked and not SessionLowWicked[1] ? -1 : 0

bucket = 0
h = hour(time, "America/New_York")
m = minute(time, "America/New_York")
if (h == 4 and m <= 25) or (h == 10 and m >=30 and m <= 55)
    bucket := 1
if (h == 4 and m >=30 and m <= 55) or (h == 11 and m <= 25)
    bucket := 2

ta = array.new<int>()
pa  = array.new<float>()
DoDRData = false

if ODRInFollowSession
    if str.contains(ticker.standard(), "ES")
        DoDRData := true        
        EXTmonB1LONG := ES_ODR_EXTmonB1LONG
        EXTmonB1SHORT := ES_ODR_EXTmonB1SHORT
        EXTmonB2LONG := ES_ODR_EXTmonB2LONG
        EXTmonB2SHORT := ES_ODR_EXTmonB2SHORT
        EXTtuesB1LONG := ES_ODR_EXTtuesB1LONG
        EXTtuesB1SHORT := ES_ODR_EXTtuesB1SHORT
        EXTtuesB2LONG := ES_ODR_EXTtuesB2LONG
        EXTtuesB2SHORT := ES_ODR_EXTtuesB2SHORT
        EXTwedsB1LONG := ES_ODR_EXTwedsB1LONG
        EXTwedsB1SHORT := ES_ODR_EXTwedsB1SHORT
        EXTwedsB2LONG := ES_ODR_EXTwedsB2LONG
        EXTwedsB2SHORT := ES_ODR_EXTwedsB2SHORT
        EXTthursB1LONG := ES_ODR_EXTthursB1LONG
        EXTthursB1SHORT := ES_ODR_EXTthursB1SHORT
        EXTthursB2LONG := ES_ODR_EXTthursB2LONG
        EXTthursB2SHORT := ES_ODR_EXTthursB2SHORT
        EXTfriB1LONG := ES_ODR_EXTfriB1LONG
        EXTfriB1SHORT := ES_ODR_EXTfriB1SHORT
        EXTfriB2LONG := ES_ODR_EXTfriB2LONG
        EXTfriB2SHORT := ES_ODR_EXTfriB2SHORT
        TMEmonB1LONG := ES_ODR_TMEmonB1LONG
        TMEmonB1SHORT := ES_ODR_TMEmonB1SHORT
        TMEmonB2LONG := ES_ODR_TMEmonB2LONG
        TMEmonB2SHORT := ES_ODR_TMEmonB2SHORT
        TMEtuesB1LONG := ES_ODR_TMEtuesB1LONG
        TMEtuesB1SHORT := ES_ODR_TMEtuesB1SHORT
        TMEtuesB2LONG := ES_ODR_TMEtuesB2LONG
        TMEtuesB2SHORT := ES_ODR_TMEtuesB2SHORT
        TMEwedsB1LONG := ES_ODR_TMEwedsB1LONG
        TMEwedsB1SHORT := ES_ODR_TMEwedsB1SHORT
        TMEwedsB2LONG := ES_ODR_TMEwedsB2LONG
        TMEwedsB2SHORT := ES_ODR_TMEwedsB2SHORT
        TMEthursB1LONG := ES_ODR_TMEthursB1LONG
        TMEthursB1SHORT := ES_ODR_TMEthursB1SHORT
        TMEthursB2LONG := ES_ODR_TMEthursB2LONG
        TMEthursB2SHORT := ES_ODR_TMEthursB2SHORT
        TMEfriB1LONG := ES_ODR_TMEfriB1LONG
        TMEfriB1SHORT := ES_ODR_TMEfriB1SHORT
        TMEfriB2LONG := ES_ODR_TMEfriB2LONG
        TMEfriB2SHORT := ES_ODR_TMEfriB2SHORT
        
    if str.contains(ticker.standard(), "CL")
        DoDRData := true        
        EXTmonB1LONG := CL_ODR_EXTmonB1LONG
        EXTmonB1SHORT := CL_ODR_EXTmonB1SHORT
        EXTmonB2LONG := CL_ODR_EXTmonB2LONG
        EXTmonB2SHORT := CL_ODR_EXTmonB2SHORT
        EXTtuesB1LONG := CL_ODR_EXTtuesB1LONG
        EXTtuesB1SHORT := CL_ODR_EXTtuesB1SHORT
        EXTtuesB2LONG := CL_ODR_EXTtuesB2LONG
        EXTtuesB2SHORT := CL_ODR_EXTtuesB2SHORT
        EXTwedsB1LONG := CL_ODR_EXTwedsB1LONG
        EXTwedsB1SHORT := CL_ODR_EXTwedsB1SHORT
        EXTwedsB2LONG := CL_ODR_EXTwedsB2LONG
        EXTwedsB2SHORT := CL_ODR_EXTwedsB2SHORT
        EXTthursB1LONG := CL_ODR_EXTthursB1LONG
        EXTthursB1SHORT := CL_ODR_EXTthursB1SHORT
        EXTthursB2LONG := CL_ODR_EXTthursB2LONG
        EXTthursB2SHORT := CL_ODR_EXTthursB2SHORT
        EXTfriB1LONG := CL_ODR_EXTfriB1LONG
        EXTfriB1SHORT := CL_ODR_EXTfriB1SHORT
        EXTfriB2LONG := CL_ODR_EXTfriB2LONG
        EXTfriB2SHORT := CL_ODR_EXTfriB2SHORT
        TMEmonB1LONG := CL_ODR_TMEmonB1LONG
        TMEmonB1SHORT := CL_ODR_TMEmonB1SHORT
        TMEmonB2LONG := CL_ODR_TMEmonB2LONG
        TMEmonB2SHORT := CL_ODR_TMEmonB2SHORT
        TMEtuesB1LONG := CL_ODR_TMEtuesB1LONG
        TMEtuesB1SHORT := CL_ODR_TMEtuesB1SHORT
        TMEtuesB2LONG := CL_ODR_TMEtuesB2LONG
        TMEtuesB2SHORT := CL_ODR_TMEtuesB2SHORT
        TMEwedsB1LONG := CL_ODR_TMEwedsB1LONG
        TMEwedsB1SHORT := CL_ODR_TMEwedsB1SHORT
        TMEwedsB2LONG := CL_ODR_TMEwedsB2LONG
        TMEwedsB2SHORT := CL_ODR_TMEwedsB2SHORT
        TMEthursB1LONG := CL_ODR_TMEthursB1LONG
        TMEthursB1SHORT := CL_ODR_TMEthursB1SHORT
        TMEthursB2LONG := CL_ODR_TMEthursB2LONG
        TMEthursB2SHORT := CL_ODR_TMEthursB2SHORT
        TMEfriB1LONG := CL_ODR_TMEfriB1LONG
        TMEfriB1SHORT := CL_ODR_TMEfriB1SHORT
        TMEfriB2LONG := CL_ODR_TMEfriB2LONG
        TMEfriB2SHORT := CL_ODR_TMEfriB2SHORT

    if  str.contains(ticker.standard(), "DE") or str.contains(ticker.standard(), "GER") or str.contains(ticker.standard(), "DAX")
        DoDRData := true        
        EXTmonB1LONG := DAX_ODR_EXTmonB1LONG
        EXTmonB1SHORT := DAX_ODR_EXTmonB1SHORT
        EXTmonB2LONG := DAX_ODR_EXTmonB2LONG
        EXTmonB2SHORT := DAX_ODR_EXTmonB2SHORT
        EXTtuesB1LONG := DAX_ODR_EXTtuesB1LONG
        EXTtuesB1SHORT := DAX_ODR_EXTtuesB1SHORT
        EXTtuesB2LONG := DAX_ODR_EXTtuesB2LONG
        EXTtuesB2SHORT := DAX_ODR_EXTtuesB2SHORT
        EXTwedsB1LONG := DAX_ODR_EXTwedsB1LONG
        EXTwedsB1SHORT := DAX_ODR_EXTwedsB1SHORT
        EXTwedsB2LONG := DAX_ODR_EXTwedsB2LONG
        EXTwedsB2SHORT := DAX_ODR_EXTwedsB2SHORT
        EXTthursB1LONG := DAX_ODR_EXTthursB1LONG
        EXTthursB1SHORT := DAX_ODR_EXTthursB1SHORT
        EXTthursB2LONG := DAX_ODR_EXTthursB2LONG
        EXTthursB2SHORT := DAX_ODR_EXTthursB2SHORT
        EXTfriB1LONG := DAX_ODR_EXTfriB1LONG
        EXTfriB1SHORT := DAX_ODR_EXTfriB1SHORT
        EXTfriB2LONG := DAX_ODR_EXTfriB2LONG
        EXTfriB2SHORT := DAX_ODR_EXTfriB2SHORT
        TMEmonB1LONG := DAX_ODR_TMEmonB1LONG
        TMEmonB1SHORT := DAX_ODR_TMEmonB1SHORT
        TMEmonB2LONG := DAX_ODR_TMEmonB2LONG
        TMEmonB2SHORT := DAX_ODR_TMEmonB2SHORT
        TMEtuesB1LONG := DAX_ODR_TMEtuesB1LONG
        TMEtuesB1SHORT := DAX_ODR_TMEtuesB1SHORT
        TMEtuesB2LONG := DAX_ODR_TMEtuesB2LONG
        TMEtuesB2SHORT := DAX_ODR_TMEtuesB2SHORT
        TMEwedsB1LONG := DAX_ODR_TMEwedsB1LONG
        TMEwedsB1SHORT := DAX_ODR_TMEwedsB1SHORT
        TMEwedsB2LONG := DAX_ODR_TMEwedsB2LONG
        TMEwedsB2SHORT := DAX_ODR_TMEwedsB2SHORT
        TMEthursB1LONG := DAX_ODR_TMEthursB1LONG
        TMEthursB1SHORT := DAX_ODR_TMEthursB1SHORT
        TMEthursB2LONG := DAX_ODR_TMEthursB2LONG
        TMEthursB2SHORT := DAX_ODR_TMEthursB2SHORT
        TMEfriB1LONG := DAX_ODR_TMEfriB1LONG
        TMEfriB1SHORT := DAX_ODR_TMEfriB1SHORT
        TMEfriB2LONG := DAX_ODR_TMEfriB2LONG
        TMEfriB2SHORT := DAX_ODR_TMEfriB2SHORT

if RDRInFollowSession
    if str.contains(ticker.standard(), "ES")
        DoDRData := true 
        EXTmonB1LONG := ES_RDR_EXTmonB1LONG
        EXTmonB1SHORT := ES_RDR_EXTmonB1SHORT
        EXTmonB2LONG := ES_RDR_EXTmonB2LONG
        EXTmonB2SHORT := ES_RDR_EXTmonB2SHORT
        EXTtuesB1LONG := ES_RDR_EXTtuesB1LONG
        EXTtuesB1SHORT := ES_RDR_EXTtuesB1SHORT
        EXTtuesB2LONG := ES_RDR_EXTtuesB2LONG
        EXTtuesB2SHORT := ES_RDR_EXTtuesB2SHORT
        EXTwedsB1LONG := ES_RDR_EXTwedsB1LONG
        EXTwedsB1SHORT := ES_RDR_EXTwedsB1SHORT
        EXTwedsB2LONG := ES_RDR_EXTwedsB2LONG
        EXTwedsB2SHORT := ES_RDR_EXTwedsB2SHORT
        EXTthursB1LONG := ES_RDR_EXTthursB1LONG
        EXTthursB1SHORT := ES_RDR_EXTthursB1SHORT
        EXTthursB2LONG := ES_RDR_EXTthursB2LONG
        EXTthursB2SHORT := ES_RDR_EXTthursB2SHORT
        EXTfriB1LONG := ES_RDR_EXTfriB1LONG
        EXTfriB1SHORT := ES_RDR_EXTfriB1SHORT
        EXTfriB2LONG := ES_RDR_EXTfriB2LONG
        EXTfriB2SHORT := ES_RDR_EXTfriB2SHORT
        TMEmonB1LONG := ES_RDR_TMEmonB1LONG
        TMEmonB1SHORT := ES_RDR_TMEmonB1SHORT
        TMEmonB2LONG := ES_RDR_TMEmonB2LONG
        TMEmonB2SHORT := ES_RDR_TMEmonB2SHORT
        TMEtuesB1LONG := ES_RDR_TMEtuesB1LONG
        TMEtuesB1SHORT := ES_RDR_TMEtuesB1SHORT
        TMEtuesB2LONG := ES_RDR_TMEtuesB2LONG
        TMEtuesB2SHORT := ES_RDR_TMEtuesB2SHORT
        TMEwedsB1LONG := ES_RDR_TMEwedsB1LONG
        TMEwedsB1SHORT := ES_RDR_TMEwedsB1SHORT
        TMEwedsB2LONG := ES_RDR_TMEwedsB2LONG
        TMEwedsB2SHORT := ES_RDR_TMEwedsB2SHORT
        TMEthursB1LONG := ES_RDR_TMEthursB1LONG
        TMEthursB1SHORT := ES_RDR_TMEthursB1SHORT
        TMEthursB2LONG := ES_RDR_TMEthursB2LONG
        TMEthursB2SHORT := ES_RDR_TMEthursB2SHORT
        TMEfriB1LONG := ES_RDR_TMEfriB1LONG
        TMEfriB1SHORT := ES_RDR_TMEfriB1SHORT
        TMEfriB2LONG := ES_RDR_TMEfriB2LONG
        TMEfriB2SHORT := ES_RDR_TMEfriB2SHORT

    if str.contains(ticker.standard(), "CL")
        DoDRData := true        
        EXTmonB1LONG := CL_RDR_EXTmonB1LONG
        EXTmonB1SHORT := CL_RDR_EXTmonB1SHORT
        EXTmonB2LONG := CL_RDR_EXTmonB2LONG
        EXTmonB2SHORT := CL_RDR_EXTmonB2SHORT
        EXTtuesB1LONG := CL_RDR_EXTtuesB1LONG
        EXTtuesB1SHORT := CL_RDR_EXTtuesB1SHORT
        EXTtuesB2LONG := CL_RDR_EXTtuesB2LONG
        EXTtuesB2SHORT := CL_RDR_EXTtuesB2SHORT
        EXTwedsB1LONG := CL_RDR_EXTwedsB1LONG
        EXTwedsB1SHORT := CL_RDR_EXTwedsB1SHORT
        EXTwedsB2LONG := CL_RDR_EXTwedsB2LONG
        EXTwedsB2SHORT := CL_RDR_EXTwedsB2SHORT
        EXTthursB1LONG := CL_RDR_EXTthursB1LONG
        EXTthursB1SHORT := CL_RDR_EXTthursB1SHORT
        EXTthursB2LONG := CL_RDR_EXTthursB2LONG
        EXTthursB2SHORT := CL_RDR_EXTthursB2SHORT
        EXTfriB1LONG := CL_RDR_EXTfriB1LONG
        EXTfriB1SHORT := CL_RDR_EXTfriB1SHORT
        EXTfriB2LONG := CL_RDR_EXTfriB2LONG
        EXTfriB2SHORT := CL_RDR_EXTfriB2SHORT
        TMEmonB1LONG := CL_RDR_TMEmonB1LONG
        TMEmonB1SHORT := CL_RDR_TMEmonB1SHORT
        TMEmonB2LONG := CL_RDR_TMEmonB2LONG
        TMEmonB2SHORT := CL_RDR_TMEmonB2SHORT
        TMEtuesB1LONG := CL_RDR_TMEtuesB1LONG
        TMEtuesB1SHORT := CL_RDR_TMEtuesB1SHORT
        TMEtuesB2LONG := CL_RDR_TMEtuesB2LONG
        TMEtuesB2SHORT := CL_RDR_TMEtuesB2SHORT
        TMEwedsB1LONG := CL_RDR_TMEwedsB1LONG
        TMEwedsB1SHORT := CL_RDR_TMEwedsB1SHORT
        TMEwedsB2LONG := CL_RDR_TMEwedsB2LONG
        TMEwedsB2SHORT := CL_RDR_TMEwedsB2SHORT
        TMEthursB1LONG := CL_RDR_TMEthursB1LONG
        TMEthursB1SHORT := CL_RDR_TMEthursB1SHORT
        TMEthursB2LONG := CL_RDR_TMEthursB2LONG
        TMEthursB2SHORT := CL_RDR_TMEthursB2SHORT
        TMEfriB1LONG := CL_RDR_TMEfriB1LONG
        TMEfriB1SHORT := CL_RDR_TMEfriB1SHORT
        TMEfriB2LONG := CL_RDR_TMEfriB2LONG
        TMEfriB2SHORT := CL_RDR_TMEfriB2SHORT

    if  str.contains(ticker.standard(), "DE") or str.contains(ticker.standard(), "GER") or str.contains(ticker.standard(), "DAX")
        DoDRData := true        
        EXTmonB1LONG := DAX_RDR_EXTmonB1LONG
        EXTmonB1SHORT := DAX_RDR_EXTmonB1SHORT
        EXTmonB2LONG := DAX_RDR_EXTmonB2LONG
        EXTmonB2SHORT := DAX_RDR_EXTmonB2SHORT
        EXTtuesB1LONG := DAX_RDR_EXTtuesB1LONG
        EXTtuesB1SHORT := DAX_RDR_EXTtuesB1SHORT
        EXTtuesB2LONG := DAX_RDR_EXTtuesB2LONG
        EXTtuesB2SHORT := DAX_RDR_EXTtuesB2SHORT
        EXTwedsB1LONG := DAX_RDR_EXTwedsB1LONG
        EXTwedsB1SHORT := DAX_RDR_EXTwedsB1SHORT
        EXTwedsB2LONG := DAX_RDR_EXTwedsB2LONG
        EXTwedsB2SHORT := DAX_RDR_EXTwedsB2SHORT
        EXTthursB1LONG := DAX_RDR_EXTthursB1LONG
        EXTthursB1SHORT := DAX_RDR_EXTthursB1SHORT
        EXTthursB2LONG := DAX_RDR_EXTthursB2LONG
        EXTthursB2SHORT := DAX_RDR_EXTthursB2SHORT
        EXTfriB1LONG := DAX_RDR_EXTfriB1LONG
        EXTfriB1SHORT := DAX_RDR_EXTfriB1SHORT
        EXTfriB2LONG := DAX_RDR_EXTfriB2LONG
        EXTfriB2SHORT := DAX_RDR_EXTfriB2SHORT
        TMEmonB1LONG := DAX_RDR_TMEmonB1LONG
        TMEmonB1SHORT := DAX_RDR_TMEmonB1SHORT
        TMEmonB2LONG := DAX_RDR_TMEmonB2LONG
        TMEmonB2SHORT := DAX_RDR_TMEmonB2SHORT
        TMEtuesB1LONG := DAX_RDR_TMEtuesB1LONG
        TMEtuesB1SHORT := DAX_RDR_TMEtuesB1SHORT
        TMEtuesB2LONG := DAX_RDR_TMEtuesB2LONG
        TMEtuesB2SHORT := DAX_RDR_TMEtuesB2SHORT
        TMEwedsB1LONG := DAX_RDR_TMEwedsB1LONG
        TMEwedsB1SHORT := DAX_RDR_TMEwedsB1SHORT
        TMEwedsB2LONG := DAX_RDR_TMEwedsB2LONG
        TMEwedsB2SHORT := DAX_RDR_TMEwedsB2SHORT
        TMEthursB1LONG := DAX_RDR_TMEthursB1LONG
        TMEthursB1SHORT := DAX_RDR_TMEthursB1SHORT
        TMEthursB2LONG := DAX_RDR_TMEthursB2LONG
        TMEthursB2SHORT := DAX_RDR_TMEthursB2SHORT
        TMEfriB1LONG := DAX_RDR_TMEfriB1LONG
        TMEfriB1SHORT := DAX_RDR_TMEfriB1SHORT
        TMEfriB2LONG := DAX_RDR_TMEfriB2LONG
        TMEfriB2SHORT := DAX_RDR_TMEfriB2SHORT

if DoDRData and dir == 1 or dirWicked == 1
    if dayofweek == dayofweek.monday
        if bucket == 1
            ta := TMEmonB1LONG
            pa := EXTmonB1LONG
        else if bucket == 2
            ta := TMEmonB2LONG
            pa := EXTmonB2LONG
    if dayofweek == dayofweek.tuesday
        if bucket == 1            
            ta := TMEtuesB1LONG
            pa := EXTtuesB1LONG
        else if bucket == 2
            ta := TMEtuesB2LONG
            pa := EXTtuesB2LONG
    if dayofweek == dayofweek.wednesday
        if bucket == 1
            ta := TMEwedsB1LONG
            pa := EXTwedsB1LONG
        else if bucket == 2
            ta := TMEwedsB2LONG
            pa := EXTwedsB2LONG
    if dayofweek == dayofweek.thursday
        if bucket == 1            
            ta := TMEthursB1LONG
            pa := EXTthursB1LONG
        else if bucket == 2
            ta := TMEthursB2LONG
            pa := EXTthursB2LONG
    if dayofweek == dayofweek.friday
        if bucket == 1            
            ta := TMEfriB1LONG
            pa := EXTfriB1LONG
        else if bucket == 2
            ta := TMEfriB2LONG
            pa := EXTfriB2LONG
else if dir == -1 or dirWicked == -1
    if dayofweek == dayofweek.monday
        if bucket == 1            
            ta := TMEmonB1SHORT
            pa := EXTmonB1SHORT
        else if bucket == 2
            ta := TMEmonB2SHORT
            pa := EXTmonB2SHORT
    if dayofweek == dayofweek.tuesday
        if bucket == 1            
            ta := TMEtuesB1SHORT
            pa := EXTtuesB1SHORT
        else if bucket == 2
            ta := TMEtuesB2SHORT
            pa := EXTtuesB2SHORT
    if dayofweek == dayofweek.wednesday
        if bucket == 1            
            ta := TMEwedsB1SHORT
            pa := EXTwedsB1SHORT
        else if bucket == 2
            ta := TMEwedsB2SHORT
            pa := EXTwedsB2SHORT
    if dayofweek == dayofweek.thursday
        if bucket == 1            
            ta := TMEthursB1SHORT
            pa := EXTthursB1SHORT
        else if bucket == 2
            ta := TMEthursB2SHORT
            pa := EXTthursB2SHORT
    if dayofweek == dayofweek.friday
        if bucket == 1            
            ta := TMEfriB1SHORT
            pa := EXTfriB1SHORT
        else if bucket == 2
            ta := TMEfriB2SHORT
            pa := EXTfriB2SHORT

var dirSess = 0
var dirWickedSess = 0
var MaxRet = -1.0
var MaxRetLine = line.new(na,na,na,na)
var box1 = box.new(na,na,na,na)
var box2 = box.new(na,na,na,na)
var box3 = box.new(na,na,na,na)
var box4 = box.new(na,na,na,na)
var box5 = box.new(na,na,na,na)
var box6 = box.new(na,na,na,na)
var box7 = box.new(na,na,na,na)
var line1 = line.new(na,na,na,na)
var line2 = line.new(na,na,na,na)
var line3 = line.new(na,na,na,na)
var ConfStartIndex = 0
var rt1m = 0
var rt2m = 0
var rt3m = 0
var maxt = 0.0
var ConfBucket = 0

if not _InFollowSession[0] and _InFollowSession[1]
    dirSess := 0
    dirWickedSess := 0
    MaxRet := -1.0
    line.delete(MaxRetLine)
    rt1m := 0
    maxt := 0.0
    ConfStartIndex := -1

// forget the boxes after the session so not deleted next session
if not _InFollowSession[0] and _InFollowSession[1]
    box1 := box.new(na,na,na,na)
    box2 := box.new(na,na,na,na)
    box3 := box.new(na,na,na,na)
    box4 := box.new(na,na,na,na)
    box5 := box.new(na,na,na,na)
    box6 := box.new(na,na,na,na)
    line1 := line.new(na,na,na,na)
    line2 := line.new(na,na,na,na)
    line3 := line.new(na,na,na,na)

p1 = float(na)
p2 = float(na)

if (dir != 0 or dirWicked != 0)
    dirSess := dir
    dirWickedSess := dirWicked

if DoDRData and (dir != 0 or dirWicked != 0) and bucket != 0 and array.size(ta) > 0
    ConfStartIndex := bar_index
    d = dir != 0 ? dir : dirWickedSess
    ConfBucket := bucket

    box.delete(box1)
    box.delete(box2)
    box.delete(box3)
    box.delete(box4)
    box.delete(box5)
    box.delete(box6)
    box.delete(box7)
    line.delete(line1)
    line.delete(line2)
    line.delete(line3)

    // Ext Median
    mt = midnight+array.get(ta, 0)
    line1 := line.new(mt, close, mt, close+1, extend=extend.both, xloc=xloc.bar_time, color=color.green, style=line.style_dashed)

    // Ret Median
    mr = midnight+array.get(ta, 5)
    line2 := line.new(mr, close, mr, close+1, extend=extend.both, xloc=xloc.bar_time, color=color.red, style=line.style_dashed)

    if statsFormat == "MedMode"
        // 70% ret time
        mr7 = midnight+array.get(ta, 10)
        line3 := line.new(mr7, close, mr7, close+1, extend=extend.both, xloc=xloc.bar_time, color=color.red, style=line.style_dotted)
        if TimeOver70
            mr := mr7

    // just to init to something... hmmmn
    ts = array.get(ta, 1)
    te = array.get(ta, 2)
    ps = array.get(pa, 0)
    pe = array.get(pa, 1)
    p1 := float(na)
    p2 := float(na)
    rt1 = int(na)
    rt2 = int(na)

    if statsFormat == "MedMode"
        // Extension1
        ts := array.get(ta, 3)
        te := array.get(ta, 4)
        ps := array.get(pa, 0)
        pe := array.get(pa, 1)
        [b11,p11,pp11] = DrawTargetBox(d, 1, ts, te, ps, pe)
        box1 := b11
        p1 := p11
        p2 := pp11

        // Extension Mode
        ts := array.get(ta, 1)
        te := array.get(ta, 2)
        ps := array.get(pa, 2)
        pe := array.get(pa, 3)
        [b7,p71,p72] = DrawTargetBox(d, 1, ts, te, ps, pe)
        box7 := b7
        //p1 := p71
        //p2 := p72
    else
        // Extension1
        ts := array.get(ta, 1)
        te := array.get(ta, 2)
        ps := array.get(pa, 0)
        pe := array.get(pa, 1)
        [b11,p11,pp11] = DrawTargetBox(d, 1, ts, te, ps, pe)
        box1 := b11
        p1 := p11
        p2 := pp11

        // Extension2
        ts := array.get(ta, 3)
        te := array.get(ta, 4)
        ps := array.get(pa, 0)
        pe := array.get(pa, 1)
        [b2,p21,p22] = DrawTargetBox(d, 1, ts, te, ps, pe)
        box2 := b2

    if dir == -1 or dirWicked == -1
        MaxRet := _high
        maxt := math.min(p1,p2)

    if dir == 1 or dirWicked == 1
        MaxRet := _low
        maxt := math.max(p1,p2)

    if statsFormat == "MedMode"
        // Retracement Mode
        ts := array.get(ta, 6)
        te := array.get(ta, 7)
        ps := array.get(pa, 4)
        pe := array.get(pa, 5)
        rt1 := math.max(ts, te) + midnight
        if rt1 > mt
            rt1 := int(na)
        [b3,p31,p32] = DrawTargetBox(d, 0, ts, te, ps, pe)
        box3 := b3

        // Retracement 1
        ts := array.get(ta, 8)
        te := array.get(ta, 9)
        ps := array.get(pa, 6)
        pe := array.get(pa, 7)
        rt2 := math.max(ts, te) + midnight
        [b4,p41,p42] = DrawTargetBox(d, 0, ts, te, ps, pe)  
        box4 := b4

        // Retracement 2
        ts := array.get(ta, 8)
        te := array.get(ta, 9)
        ps := array.get(pa, 8)
        pe := array.get(pa, 9)
        [b5,p51,p52] = DrawTargetBox(d, 0, ts, te, ps, pe)
        box5 := b5
    else
        // Retracement 1
        ts := array.get(ta, 6)
        te := array.get(ta, 7)
        ps := array.get(pa, 2)
        pe := array.get(pa, 3)
        rt1 := math.max(ts, te) + midnight
        [b3,p31,p32] = DrawTargetBox(d, 0, ts, te, ps, pe)
        box3 := b3

        // Retracement 2
        ts := array.get(ta, 8)
        te := array.get(ta, 9)
        ps := array.get(pa, 2)
        pe := array.get(pa, 3)
        rt2 := math.max(ts, te) + midnight
        [b4,p41,p42] = DrawTargetBox(d, 0, ts, te, ps, pe)  
        box4 := b4

        // Retracement 3
        ts := array.get(ta, 6)
        te := array.get(ta, 7)
        ps := array.get(pa, 4)
        pe := array.get(pa, 5)
        [b5,p51,p52] = DrawTargetBox(d, 0, ts, te, ps, pe)
        box5 := b5

        // Retracement 4
        ts := array.get(ta, 8)
        te := array.get(ta, 9)
        ps := array.get(pa, 4)
        pe := array.get(pa, 5)
        [b6,p61,p62] = DrawTargetBox(d, 0, ts, te, ps, pe)
        box6 := b6

    if statsFormat != "MedMode"
        if rt1 > midnight and rt2 > midnight // check if we have 2 retracements
            rt1m := math.min(rt1, rt2) // pick earliest
        else
            rt1m := rt1 > midnight ? rt1 : rt2 // else we have one - just pick the one that is not na - i.e. is not just set to "na + midnight" above...
    else
        rt1m := rt1
        rt2m := rt2
        rt3m := mr

    //if rt1m > mt
    //rt1m := int(na)

if MaxRet != -1 
    if ConfStartIndex == bar_index
        if dirSess == -1 or dirWickedSess == -1
            MaxRet := _high
        if dirSess == 1 or dirWickedSess == 1
            MaxRet := _low
    else
        if dirSess == -1 or dirWickedSess == -1
            if _high > MaxRet
                MaxRet := _high

        if dirSess == 1 or dirWickedSess == 1
            if _low < MaxRet
                MaxRet := _low

    line.delete(MaxRetLine)
    if ConfStartIndex != -1
        MaxRetLine := line.new(ConfStartIndex, MaxRet, bar_index + 5, MaxRet, color=color.black, width = 2)

enter = false
//plot(rt1m,title="rt1m")
//plot(rt2m,title="rt2m")
//plot(rt3m,title="rt3m")
//plot(maxt,"maxt")
//plot(_time_5,title="_time_5")

//plot(dirSess == 1 or dirWickedSess == 1?1:0, title="dirSess == 1 or dirWickedSess == 1")
//plot(dirSess == -1 or dirWickedSess == -1?1:0,title="dirSess == -1 or dirWickedSess == -1")
sl = -1.0
tp = -1.0

var mechR = 0.0
var signalDaysOfWeek = array.new<int>()
var signalBuckets = array.new<int>()


if MonEnabled
    array.push(signalDaysOfWeek, dayofweek.monday)
if TuesEnabled
    array.push(signalDaysOfWeek, dayofweek.tuesday)
if WedsEnabled
    array.push(signalDaysOfWeek, dayofweek.wednesday)
if ThursEnabled
    array.push(signalDaysOfWeek, dayofweek.thursday)
if FriEnabled
    array.push(signalDaysOfWeek, dayofweek.friday)

if Bucket1Enabled
    array.push(signalBuckets, 1)
if Bucket2Enabled
    array.push(signalBuckets, 2)

// goldfish
M7B_goldfish = false

if goldfishEnabled
    if bar_index > ConfStartIndex+2
        if dirSess == -1 or dirWickedSess == -1
            if _high[2] >= _M7BLow[2] and _close <= _M7BLow and _close[1] <= _M7BLow
                M7B_goldfish := true

        if dirSess == 1 or dirWickedSess == 1
            if _low[2] <= _M7BHigh[2] and _close >= _M7BHigh and _close[1] >= _M7BHigh
                M7B_goldfish := true

M7BoxFormedEnter = false
var allowNoConf = 0
var FixedSL = 0.0
var FixedTP = 0.0

if boxClosedEntryEnabled and (not na(time(_period, "0355-0400", "America/New_York")) or not na(time(_period, "1025-1030", "America/New_York")))
    log.warning("boxClosedEntryEnabled {0} {1} {2} {3}", _DROpen, _DRClose, _IDRange, _M7BRange, (_IDRange *0.4))
    if _M7BRange >= (_IDRange*M7BoxMinSize)
        M7BoxFormedEnter := true
        FixedSL := _DRM7BMid

        // target 1 std dev
        if _M7BDir == -1
            FixedTP := _IDRLow - _IDRange
            
        if _M7BDir == 1
            FixedTP := _IDRHigh + _IDRange

        allowNoConf := _M7BDir
    else
        log.warning("boxClosedEntryEnabled box too small")

boxClosedRetrace_MP = EntryPrice_Multiplier

// if not triggered and enabled and DR close candle time
if boxClosedRetracePrice == 0.0 and boxClosedRetraceEntryEnabled and (not na(time(_period, "0355-0400", "America/New_York")) or not na(time(_period, "1025-1030", "America/New_York")))
    if _M7BRange >= (_IDRange *M7BoxMinSize)

        // target 1 std dev
        if _M7BDir == -1
            FixedSL := _M7BHigh
            FixedTP := _IDRLow - _IDRange
            boxClosedRetracePrice := _M7BLow + (_M7BRange * boxClosedRetrace_MP)
            log.warning("boxClosedRetraceEntryEnabled boxClosedRetracePrice SHORT {0}", boxClosedRetracePrice) 
            
        if _M7BDir == 1
            FixedSL := _M7BLow
            FixedTP := _IDRHigh + _IDRange
            boxClosedRetracePrice := _M7BHigh - (_M7BRange * boxClosedRetrace_MP)
            log.warning("boxClosedRetraceEntryEnabled boxClosedRetracePrice LONG {0}", boxClosedRetracePrice)

        allowNoConf := _M7BDir
    else
        log.warning("boxClosedRetraceEntryEnabled box too small")

if _low <= boxClosedRetracePrice and _high >= boxClosedRetracePrice
    log.warning("boxClosedRetraceEntryEnabled triggered {0} dir {1}", boxClosedRetracePrice, allowNoConf)
    // for now enter on candle close when price crossed
    M7BoxFormedEnter := true
    // TODO - simulate limit order


plotshape((dirSess == -1 or dirWickedSess == -1) and M7B_goldfish, location=location.abovebar, style=shape.xcross, size=size.normal, color=color.red)
plotshape((dirSess == 1 or dirWickedSess == 1) and M7B_goldfish, location=location.belowbar, style=shape.xcross, size=size.normal, color=color.green)

// end goldfish

isHoliday = NewsAndHols.isHoliday()
isNewsDay = NewsAndHols.isNewsDay()

isNewsDaySig = false
isHolidaySig = false

if not IncludeNewsResults
    isNewsDaySig := isNewsDay

if not IncludeHolidayResults
    isHolidaySig := isHoliday

timeEntry = false

if statsFormat != "MedMode"
    timeEntry := _time_5 == rt1m
else
    //timeEntry := (RMEnabled and _time_5 == rt1m) or (R1Enabled and _time_5 == rt2m) or (RTEnabled and (_time_5 == rt3m or _time_5[1] == rt3m or _time_5[2] == rt3m))
    timeEntry := (RMEnabled and _time_5 == rt1m) or (R1Enabled and _time_5 == rt2m) or (RTEnabled and _time_5 == rt3m)

// only do anand 3R on rt1m if we don't have 2 entry points - wait for rt2m
if AnandStyleEnabled2ndFilterEnabled and rt1m and rt2m and _time_5 == rt1m
    AnandStyleEnabled := false

OpenTrades = 0
if matrix.rows(signals) > 0
    for i = 0 to matrix.rows(signals)-1 
        signal = matrix.row(signals, i)
        if na(array.get(signal, 6)) or array.get(signal, 6) == 2
            OpenTrades += 1

EntryBarStatus = true
if not IncludeConfBarEntry
    EntryBarStatus := bar_index > ConfStartIndex

DRRange_SL_MultiplierTmp = DRRange_SL_Multiplier

M7BEntryAllowed = true
if M7BFilterEnabled
    if dirSess == 1 or dirWickedSess == 1
        if _close < _M7BLow
            M7BEntryAllowed := false
        if _close > _M7BLow and _close <= _DRM7BMid
            MaxRet := _M7BLow-(syminfo.mintick * M7BSLMultiplier)
            DRRange_SL_MultiplierTmp := 0
        if _close < _M7BHigh and _close > _DRM7BMid
            MaxRet := _DRM7BMid-(syminfo.mintick * M7BSLMultiplier)
            DRRange_SL_MultiplierTmp := 0
    if dirSess == -1 or dirWickedSess == -1
        if _close > _M7BHigh
            M7BEntryAllowed := false
        if _close < _M7BHigh and _close >= _DRM7BMid
            MaxRet := _M7BHigh+(syminfo.mintick * M7BSLMultiplier)
            DRRange_SL_MultiplierTmp := 0
        if _close > _M7BLow and _close < _DRM7BMid
            MaxRet := _DRM7BMid+(syminfo.mintick * M7BSLMultiplier)
            DRRange_SL_MultiplierTmp := 0     

limit = float(na)
IDRSLPriceDiff = 0.0

M7BDirAligned = true
if M7BDirAlignedEnabled
    M7BDirAligned := _M7BDir == (dirSess or dirWickedSess)

DRModelAligned = true
if DRModelAlignedEnabled
    DRModelAligned := ((dirSess == 1 or dirWickedSess == 1) and DRModel == "upside") or ((dirSess == -1 or dirWickedSess == -1) and DRModel == "downside")

tradeIsOn = (maxSessionTrades > 0 and sessionTrades <= maxSessionTrades) and DRModelAligned and M7BDirAligned and M7BEntryAllowed and not isHolidaySig and not isNewsDaySig and OpenTrades < MaxOpenTrades and EntryBarStatus and ((ODRInFollowSession and ODRSignalsEnabled) or (RDRInFollowSession and RDRSignalsEnabled) or allowNoConf != 0) and (array.includes(signalDaysOfWeek, dayofweek))
monkey = array.includes(signalBuckets, ConfBucket) and timeEntry

//plot(tradeIsOn and (monkey or M7B_goldfish)?1:0, title="tradeIsOn and ((monkey and timeEntry) or M7B_goldfish)")

if not na(_IDRHigh)
    IDRSLPriceDiff := ((_IDRHigh - _IDRLow) / 100) * MinSLIDRPC

log.warning("tradeIsOn {0} M7BoxFormedEnter {1} num trades {2} max {3} allowNoConf dir {4} isNews/Hols {5}", tradeIsOn?1:0, M7BoxFormedEnter?1:0, OpenTrades, MaxOpenTrades, allowNoConf, isHolidaySig or isNewsDaySig ? 1:0)

if M7BoxFormedEnter
    MaxRet := FixedSL
    maxt := FixedTP

var dodgy_entry = 0

if tradeIsOn and ((monkey and timeEntry) or M7B_goldfish or M7BoxFormedEnter)
    log.warning("tradeIsOn 2")
    if (dirSess == 1 or dirWickedSess == 1) or (allowNoConf == 1)
        log.warning("tradeIsOn 3")
        tp := maxt - _close
        sl := _close - MaxRet 
        if sl > IDRSLPriceDiff
            log.warning("tradeIsOn 4")
            sl := sl + (syminfo.mintick*DRRange_SL_MultiplierTmp)
            enter := tp/sl >= MinSL
            if not enter and AnandStyleEnabled
                limit := MaxRet - (syminfo.mintick*DRRange_SL_MultiplierTmp) + (((maxt - MaxRet) / (1+MinSL)))
            if enter or FixedRTP > 0 or limit > 0
                log.warning("tradeIsOn 5")
                mechR := mechR + (tp/sl)
                if FixedRTP > 0
                    log.warning("tradeIsOn 6")
                    tp := sl * FixedRTP
                    IDRRange_TP_Multiplier := 1        
                tp_price = _close + (IDRRange_TP_Multiplier * tp)
                sl_price = MaxRet-(syminfo.mintick*DRRange_SL_MultiplierTmp)
                if _low <= sl_price and _high >= sl_price
                    dodgy_entry += 1
                log.error("Signal {0,number,#.####} {1,number,#.####} {2,number,#.####} {3,number,#.####}", _close, tp_price, sl_price, sl)
                matrix.add_row(signals, matrix.rows(signals), array.from(_bar_index, _time, _open, _high, _low, _close, float(na), tp_price, sl_price, 1, sl))
                sessionTrades += 1
                if indicatorEnabled and TPSLEnabled
                    if bar_index > 0
                        line.new(bar_index, _close, bar_index+5, _close, xloc = xloc.bar_index, color = color.blue)
                        line.new(bar_index, sl_price, bar_index+5, sl_price, xloc = xloc.bar_index, color = color.red)
                        line.new(bar_index, tp_price, bar_index+5, tp_price, xloc = xloc.bar_index, color = color.green)                
                //strategy.cancel("long")
                //strategy.cancel("long-exit")
                //strategy.cancel("long-exit-be")
                //strategy.order("long", strategy.long, limit=limit, comment="long stop " + str.tostring(sl_price), qty=CalcPosSize(_close,sl_price))
                //strategy.exit("long-exit", "long", stop=sl_price, limit=tp_price)                    

    else if (dirSess == -1 or dirWickedSess == -1) or (allowNoConf == -1)
        tp := _close - maxt
        sl := MaxRet - _close
        if sl > IDRSLPriceDiff
            sl := sl + (syminfo.mintick*DRRange_SL_MultiplierTmp)
            enter := tp/sl >= MinSL
            if not enter and RMEnabled and AnandStyleEnabled
                limit := MaxRet+(syminfo.mintick*DRRange_SL_MultiplierTmp) - (((MaxRet-maxt) / (1+MinSL)))
            if enter or FixedRTP > 0 or limit > 0
                mechR := mechR + (tp/sl)
                if FixedRTP > 0
                    tp := sl * FixedRTP
                    IDRRange_TP_Multiplier := 1
                tp_price = _close - (IDRRange_TP_Multiplier * tp)
                sl_price = MaxRet+(syminfo.mintick*DRRange_SL_MultiplierTmp)
                if _low <= sl_price and _high >= sl_price
                    dodgy_entry += 1                
                log.error("Signal {0,number,#.####} {1,number,#.####} {2,number,#.####} {3,number,#.####}", _close, tp_price, sl_price, sl)
                matrix.add_row(signals, matrix.rows(signals), array.from(_bar_index, _time, _open, _high, _low, _close, float(na), tp_price, sl_price, 0, sl))
                sessionTrades += 1
                if indicatorEnabled and TPSLEnabled
                    if bar_index > 0
                        line.new(bar_index, _close, bar_index+5, _close, xloc = xloc.bar_index, color = color.blue)
                        line.new(bar_index, sl_price, bar_index+5, sl_price, xloc = xloc.bar_index, color = color.red)
                        line.new(bar_index, tp_price, bar_index+5, tp_price, xloc = xloc.bar_index, color = color.green)                 
                //strategy.cancel("short")
                //strategy.cancel("short-exit")
                //strategy.cancel("short-exit-be")
                //strategy.order("short", strategy.short, limit=limit, comment = "short limit " + str.tostring(_close), qty=CalcPosSize(_close,sl_price))
                //strategy.exit("short-exit", "short", stop=sl_price, limit=tp_price)   

//plot(sl != -1 and (enter or FixedRTP > 0 or limit > 0)?1:0,"entry check")
//plot(tradeIsOn and ((monkey and timeEntry) or M7B_goldfish or M7BoxFormedEnter)?1:0, title="enter")
//plot(M7BoxFormedEnter?1:0, title="M7BoxFormedEnter")
//plot(FixedRTP, title="FixedRTP")
//plot(limit, title="limit")
//plot(tp, title="tp")
//plot(sl, title="sl")

//plot(MaxRet, "MaxRet")
//plot(maxt, title="maxt")   
//plot(mechR, title="mechR")
//plot(IDRSLPC, "IDR10pc")
//plot(isHoliday or isNewsDay?1:0, "holidayOrNews")

var t2 = table.new(position.middle_right, 1, 9, color.rgb(76, 175, 79, 50))
table.cell(t2, 0, 0, "R " + str.tostring(WinRTotal-LoseRTotal, "##.##"), text_color = color.black, text_size = size.small)
table.cell(t2, 0, 1, "T " + str.tostring(win+lose, "#"), text_color = color.black, text_size = size.small)
table.cell(t2, 0, 2, "W " + str.tostring(win, "#"), text_color = color.black, text_size = size.small)
table.cell(t2, 0, 3, "BE " + str.tostring(BECount, "#"), text_color = color.black, text_size = size.small)
table.cell(t2, 0, 4, "L " + str.tostring(lose, "#"), text_color = color.black, text_size = size.small)
table.cell(t2, 0, 5, "W% " + str.tostring(((win-BECount)/(win+lose))*100, "##.##"), text_color = color.black, text_size = size.small)
table.cell(t2, 0, 6, "BE% " + str.tostring((BECount/(win+lose))*100, "##.##"), text_color = color.black, text_size = size.small)
table.cell(t2, 0, 7, "L% " + str.tostring((lose/(win+lose))*100, "##.##"), text_color = color.black, text_size = size.small)
table.cell(t2, 0, 8, "X " + str.tostring(dodgy_entry), text_color = color.black, text_size = size.small)

plotshape(sl != -1 and (enter or FixedRTP > 0 or limit > 0), location=location.abovebar, style=shape.square, size=size.normal, color=color.rgb(51, 228, 251))
plotshape(_DRClose > 0 and not (_DRClose[1] > 0) and _M7BDir == 1, location=location.abovebar, style=shape.labelup, size=size.normal, color=color.green)
plotshape(_DRClose > 0 and not (_DRClose[1] > 0) and _M7BDir == -1, location=location.abovebar, style=shape.labeldown, size=size.normal, color=color.red)
plotshape(SessionJustStarted and (RDRInFollowSession or ODRInFollowSession) and (DRModel == "upside"), location=location.belowbar, style=shape.triangleup, size=size.normal, color=color.green)
plotshape(SessionJustStarted and (RDRInFollowSession or ODRInFollowSession) and (DRModel == "downside"), location=location.belowbar, style=shape.triangledown, size=size.normal, color=color.red)
plotshape(SessionJustStarted and (RDRInFollowSession or ODRInFollowSession) and (DRModel == "expansion"), location=location.belowbar, style=shape.diamond, size=size.normal, color=color.rgb(82, 146, 255))
plotshape(SessionJustStarted and (RDRInFollowSession or ODRInFollowSession) and (DRModel == "contraction"), location=location.belowbar, style=shape.circle, size=size.normal, color=color.rgb(220, 82, 255))
plotshape(SessionJustStarted and ODRInFollowSession and isNewsDay, location=location.abovebar, style=shape.flag, size=size.normal, text="NEWS", color=color.red)
plotshape(SessionJustStarted and ODRInFollowSession and isHoliday, location=location.abovebar, style=shape.flag, size=size.normal, text="HOLS", color=color.red)

IB_down = false
IB_up = false
IB_open = false

// IBs
if _open[1] > _close[1]
    // down candle
    if _open < _close[1]
        IB_down := true
        if _open >= _close or _open == _close
            IB_open := true

if _open[1] < _close[1]
    // up candle
    if _open > _close[1]
        IB_up := true
        if _open <= _close or _open == _close
            IB_open := true

if _open[1] == _close[1]
    // doji candle
    if _open > _close[1]
        IB_up := true
        if _open <= _close or _open == _close
            IB_open := true

    if _open < _close[1]
        IB_down := true
        if _open >= _close or _open == _close
            IB_open := true

plotshape(IB_up and IB_open, location=location.belowbar, style=shape.circle, size=size.tiny, color=color.green)
plotshape(IB_down and IB_open, location=location.abovebar, style=shape.circle, size=size.tiny, color=color.red)

upIBTrue = IB_up and IB_open ? 1:0
downIBTrue = IB_down and IB_open ? 1:0

upIBCount = math.sum(upIBTrue, 24)
downIBCount = math.sum(downIBTrue, 24)

IBStatusCol = color.gray
if upIBCount > downIBCount
    IBStatusCol := color.green
else if upIBCount < downIBCount
    IBStatusCol := color.red

plotshape(true, location=location.bottom, style=shape.square, size=size.tiny, color=IBStatusCol)
